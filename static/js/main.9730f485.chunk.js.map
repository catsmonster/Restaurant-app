{"version":3,"sources":["components/Navigation/Navigation.js","components/DeleteBtn/DeleteBtn.js","components/Table/Table.js","components/Tables/Tables.js","components/RemoveMenu/RemoveMenu.js","components/Scroll.js","components/Menu/Menu.js","components/CategoryItem/CategoryItem.js","components/SearchMenu/SearchMenu.js","components/Menu/CategoriesWithMenu.js","components/ReturnDelivered/ReturnDelivered.js","components/Orders/Orders.js","components/ToDoMenu/ToDoMenu.js","components/Statistics/Statistics.js","components/CustomizeMenu/CustomizeMenu.js","containers/App.js","serviceWorker.js","index.js"],"names":["Navigation","setPath","resetWhenChangingPath","setNavActive","navActive","className","onClick","DeleteBtn","tempTables","setTempTables","id","setClickCount","clickCount","updatedTempTables","filter","item","i","length","Table","setClickedTable","tableActive","Tables","path","clickedTable","tablesArray","map","user","key","orders","total","timeAdded","Date","RemoveMenu","name","onRemoveOrderedItem","Scroll","props","style","overflowY","maxHeight","margin","children","Menu","price","onClickMenu","CategoryItem","onClickCategory","categoryActive","setCategoryActive","SearchMenu","setMenuSearch","onChange","e","target","value","CategoriesWithMenu","setSelectedCategory","menuSearch","selectedCategory","tempMenu","setTempMenu","includes","push","status","time","table","indexOfSelectedItem","findIndex","updateTempMenu","active","menuItemsToShow","toLowerCase","category","menuOfSelectedCategoryActive","menuArrayActive","menuOfSelectedCategoryHidden","menuArrayHidden","allCategoriesActive","allCategoriesHidden","uniqueCategoriesActive","Set","uniqueCategoriesHidden","categoriesArray","hiddenCategoriesArray","ReturnDelivered","Orders","logTables","setLogTables","getRelevantOrders","enumerateOrders","waitingOrders","preparedOrders","ordersToDisplay","concat","arrCount","arg","orderedItemsArr","order","indexOfOrderedItem","splice","priceOfSelectedItem","selectedMenuArr","deliveredOrders","deliveredOrdersArr","clearTable","updatedTempTable","logTotal","totalWithTip","updatedLogTables","alert","tip","Number","prompt","tipChange","tipChangeTen","ToDoMenu","onSetDone","Statistics","updateTempTables","indexOfSelectedOrder","getTime","waitingArray","deliveredArray","deliveredMenuArr","parseFloat","toFixed","CustomizeMenu","menuInput","setMenuInput","addNewItemtoMenu","setAddNewItemtoMenu","type","updatedInput","Math","abs","existingItems","lastKnownId","isNaN","updateMenu","App","useState","clickedOnDelivered","setClickedOnDelivered","tempWaitingOrders","flat","sort","a","b","ordersDetailsArray","relevantOrders","orderNamesArr","count","forEach","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9730f485.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({setPath, resetWhenChangingPath, setNavActive, navActive}) => {\r\n\r\n    return (\r\n            <ul className='NavUl'>\r\n                <li className={`NavLi ${navActive===0 ? 'navActive' : ''}`} onClick={()=> {setPath('tables'); resetWhenChangingPath(); setNavActive(0);}}>Tables</li>\r\n                <li className={`NavLi ${navActive===1 ? 'navActive' : ''}`} onClick={()=> {setPath('Statistics'); resetWhenChangingPath(); setNavActive(1);}}>Manage Orders</li>\r\n                <li className={`NavLi ${navActive===2 ? 'navActive' : ''}`} onClick={()=> {setPath('customize'); resetWhenChangingPath(); setNavActive(2);}}>Customize menu</li>\r\n            </ul>\r\n        );\r\n\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst DeleteBtn = ({tempTables, setTempTables, id, setClickCount, clickCount}) => {\r\n    return (\r\n        <div className='deleteBtnContainer'>\r\n        <button className='deleteBtn' onClick={()=> {\r\n            const updatedTempTables = tempTables.filter((item) => item.id !== id);\r\n            for (let i=0; i<updatedTempTables.length; i++) {\r\n                updatedTempTables[i].id = i;\r\n            }\r\n            setTempTables(updatedTempTables);\r\n            setClickCount(clickCount - 1);\r\n        }}></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteBtn;","import React from 'react';\r\nimport './Table.css'\r\nimport DeleteBtn from \"../DeleteBtn/DeleteBtn\";\r\n\r\nconst Table = ({id, setPath, setClickedTable, setTempTables, tempTables, setClickCount, clickCount}) => {\r\n\r\n    const setActiveTable = () => {\r\n        if (tempTables[id].tableActive === 'false') {\r\n            return 'tableDiv'\r\n        } else if (tempTables[id].tableActive === 'waiting') {\r\n            return 'activeTableDiv'\r\n        } else {\r\n            return 'eatingTableDiv'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={setActiveTable()} id={id}>\r\n            <DeleteBtn id={id} setTempTables={setTempTables} tempTables={tempTables} setClickCount={setClickCount} clickCount={clickCount}/>\r\n            <p className='clickTable' onClick={()=> {\r\n                setClickedTable(id);\r\n                setPath(`order_${id}`)}\r\n\r\n            }>{`Click here to view and edit table number ${id + 1}`}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport './Tables.css';\r\nimport Table from \"../Table/Table\";\r\n\r\nconst Tables = ({tempTables, path, setPath, setTempTables, clickCount, setClickCount, setClickedTable, clickedTable}) => {\r\n\r\n    const tablesArray = tempTables.map((user, i) => <Table setClickCount={setClickCount} clickCount={clickCount} setClickedTable={setClickedTable} setPath={setPath} key={tempTables[i].id} id={tempTables[i].id} tempTables={tempTables} setTempTables={setTempTables} clickedTable={clickedTable} /> );\r\n\r\n    return (\r\n        <div>\r\n            <div className='container'>\r\n                {tablesArray}\r\n            </div>\r\n            <button className={'addTable'} onClick={()=> {\r\n                setClickCount(clickCount + 1);\r\n                setTempTables([...tempTables, {\r\n                    id: clickCount,\r\n                    orders: [],\r\n                    total: 0,\r\n                    tableActive: 'false',\r\n                    timeAdded: new Date()\r\n                }])\r\n\r\n            }\r\n            }>\r\n                Add a new table\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tables;","import React from 'react';\r\n\r\nconst RemoveMenu = ({name, onRemoveOrderedItem}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n\r\n        }}>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RemoveMenu;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"menuList\" style={{ overflowY: 'scroll', maxHeight: '250px', margin: '1%' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './Menu.css';\r\n\r\nconst Menu = ({name, price, onClickMenu}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n            onClickMenu({name, price})}} className='menuContainer'>\r\n            <span className='menuItem'>\r\n                {name}\r\n            </span>\r\n            <span className='menuItem'>\r\n                {price}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst CategoryItem = ({name, onClickCategory, categoryActive, setCategoryActive, id}) => {\r\n    return (\r\n      <div className={`menuContainer`} id={id===categoryActive ? 'categoryActive' : ''} onClick={() => {\r\n          onClickCategory({name});\r\n          setCategoryActive(id);\r\n      }}>\r\n          <span className='menuItem'>\r\n              {name}\r\n          </span>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default CategoryItem;","import React from 'react';\r\n\r\nconst SearchMenu = ({setMenuSearch}) => {\r\n  return (\r\n    <div>\r\n        <input className=\"searchBox\" onChange={(e) => setMenuSearch(e.target.value)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchMenu;","import React from 'react';\r\nimport Menu from \"./Menu\";\r\nimport CategoryItem from \"../CategoryItem/CategoryItem\";\r\nimport Scroll from \"../Scroll\";\r\nimport SearchMenu from \"../SearchMenu/SearchMenu\";\r\n\r\nconst CategoriesWithMenu = ({tempTables, clickedTable, setTempTables, path, setSelectedCategory, setMenuSearch, menuSearch, selectedCategory, categoryActive, setCategoryActive, tempMenu, setTempMenu}) => {\r\n    const onClickMenu = ({name, price}) => {\r\n\r\n        if (path.includes('order_')) {\r\n            const updatedTempTables = [...tempTables];\r\n            updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable});\r\n            updatedTempTables[clickedTable].total += price;\r\n            updatedTempTables[clickedTable].tableActive = 'waiting';\r\n            setTempTables(updatedTempTables);\r\n        } else {\r\n            const indexOfSelectedItem = tempMenu.findIndex((item) => item.name === name);\r\n            const updateTempMenu = [...tempMenu];\r\n            if (updateTempMenu[indexOfSelectedItem].active === true) {\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n                setTempMenu(updateTempMenu);\r\n            } else {\r\n                updateTempMenu[indexOfSelectedItem].active = true;\r\n                setTempMenu(updateTempMenu);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onClickCategory = ({name}) => {\r\n        setSelectedCategory(name);\r\n        setMenuSearch('');\r\n    };\r\n    const menuItemsToShow = (status) => {\r\n        const activeMenuItems = tempMenu.filter((item) => item.active === status);\r\n        const menuOfSelectedCategory = activeMenuItems.filter((item) => {\r\n            if (selectedCategory === 'All' && !menuSearch.length > 0) {\r\n                return item;\r\n            } else if (menuSearch.length > 0) {\r\n                return item.name.toLowerCase().includes(menuSearch.toLowerCase());\r\n            }\r\n            return item.category === selectedCategory;\r\n        });\r\n        return menuOfSelectedCategory;\r\n    };\r\n\r\n    const menuOfSelectedCategoryActive = menuItemsToShow(true);\r\n\r\n    const menuArrayActive = menuOfSelectedCategoryActive.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryActive[i].id} id={menuOfSelectedCategoryActive[i].id} name={menuOfSelectedCategoryActive[i].name} price={menuOfSelectedCategoryActive[i].price} onClickMenu={onClickMenu}/>\r\n    });\r\n\r\n    const menuOfSelectedCategoryHidden = menuItemsToShow(false);\r\n\r\n    const menuArrayHidden = menuOfSelectedCategoryHidden.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryHidden[i].id} id={menuOfSelectedCategoryHidden[i].id} name={menuOfSelectedCategoryHidden[i].name} price={menuOfSelectedCategoryHidden[i].price} onClickMenu={onClickMenu}/>\r\n    });\r\n\r\n    let allCategoriesActive = ['All'];\r\n    let allCategoriesHidden = ['All'];\r\n    for (let i=0; i<tempMenu.length; i++) {\r\n        if (tempMenu[i].active === true) {\r\n            allCategoriesActive.push(tempMenu[i].category)\r\n        } else {\r\n            allCategoriesHidden.push(tempMenu[i].category)\r\n        }\r\n    }\r\n    const uniqueCategoriesActive = [...new Set(allCategoriesActive)];\r\n\r\n    const uniqueCategoriesHidden = [...new Set(allCategoriesHidden)];\r\n\r\n    const categoriesArray = uniqueCategoriesActive.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n    const hiddenCategoriesArray = uniqueCategoriesHidden.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='menuArray'>\r\n                <Scroll>\r\n                    {categoriesArray}\r\n                </Scroll>\r\n                <Scroll>\r\n                    {menuArrayActive}\r\n                </Scroll>\r\n            </div>\r\n            {path === 'customize' && hiddenCategoriesArray.length > 1 ?\r\n            <div>\r\n                <h3>Click a menu item to bring it back from the trash</h3>\r\n                <div className='menuArray'>\r\n                    <Scroll>\r\n                        {hiddenCategoriesArray}\r\n                    </Scroll>\r\n                    <Scroll>\r\n                        {menuArrayHidden}\r\n                    </Scroll>\r\n                </div>\r\n            </div>: <span></span>\r\n                }\r\n            <div className='searchContainer'>\r\n                <span id='searchText'>Search menu item:</span>\r\n                <SearchMenu setMenuSearch={setMenuSearch}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoriesWithMenu;","import React from 'react';\r\n\r\nconst ReturnDelivered = ({name, onRemoveOrderedItem}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n\r\n        }}>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnDelivered;","import React from 'react';\r\nimport './Orders.css'\r\nimport RemoveMenu from \"../RemoveMenu/RemoveMenu\";\r\nimport Scroll from \"../Scroll\";\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\nimport ReturnDelivered from \"../ReturnDelivered/ReturnDelivered\";\r\n\r\nconst Orders = ({path, tempTables, clickedTable, setTempTables, logTables, setLogTables, setMenuSearch, menuSearch, selectedCategory, setSelectedCategory, categoryActive, setCategoryActive, getRelevantOrders, enumerateOrders, tempMenu, setTempMenu}) => {\r\n\r\n\r\n    const waitingOrders = getRelevantOrders('waiting');\r\n    const preparedOrders = getRelevantOrders('prepared');\r\n    const ordersToDisplay = waitingOrders.concat(preparedOrders);\r\n\r\n    const arrCount = enumerateOrders(ordersToDisplay);\r\n\r\n    const onRemoveOrderedItem = ({name}, arg) => {\r\n        const updatedTempTables = [...tempTables];\r\n        let orderedItemsArr = [];\r\n        if (arg === 'waiting') {\r\n            orderedItemsArr = updatedTempTables[clickedTable].orders.filter((order)=> (order.status === 'waiting' || order.status === 'prepared'));\r\n        } else if (arg === 'delivered') {\r\n            orderedItemsArr = updatedTempTables[clickedTable].orders.filter((order)=> (order.status === 'delivered'));\r\n        }\r\n        const indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0]);\r\n        updatedTempTables[clickedTable].orders.splice(indexOfOrderedItem, 1);\r\n        let priceOfSelectedItem = 0;\r\n        for (let i=0; i<tempMenu.length; i++)\r\n            if (tempMenu[i].name === name[0]) {\r\n                priceOfSelectedItem = tempMenu[i].price;\r\n            }\r\n        updatedTempTables[clickedTable].total -= priceOfSelectedItem;\r\n        if (updatedTempTables[clickedTable].total === 0) {\r\n            updatedTempTables[clickedTable].tableActive = 'false';\r\n            updatedTempTables[clickedTable].timeAdded = new Date();\r\n        }\r\n        setTempTables(updatedTempTables);\r\n    };\r\n\r\n    const selectedMenuArr = arrCount.map((item, i)=> {\r\n        return <RemoveMenu key={i} id={i} name={arrCount[i]} onRemoveOrderedItem={onRemoveOrderedItem} />\r\n    });\r\n\r\n    const tempDeliveredOrders = getRelevantOrders('delivered');\r\n    const deliveredOrders = enumerateOrders(tempDeliveredOrders);\r\n\r\n    const deliveredOrdersArr = deliveredOrders.map((item, i)=> {\r\n        return <ReturnDelivered key={i} id={i} name={deliveredOrders[i]} onRemoveOrderedItem={onRemoveOrderedItem} />\r\n    });\r\n\r\n    const clearTable = () => {\r\n        const updatedTempTable = [...tempTables];\r\n        updatedTempTable[clickedTable] = {id: clickedTable, orders: [], total: 0, tableActive: 'false', timeAdded: new Date()};\r\n        setTempTables(updatedTempTable);\r\n    };\r\n\r\n    const logTotal = () => {\r\n        const totalWithTip = tempTables[clickedTable].total;\r\n        const updatedLogTables = {...logTables};\r\n        updatedLogTables.total = logTables.total + totalWithTip;\r\n        setLogTables(updatedLogTables);\r\n    };\r\n\r\n    const tipChange = () => {\r\n        let tip = Number(prompt('Is there a tip?', '0'));\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total += tip;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    const tipChangeTen = () => {\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total *= 1.1;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <h1>This is da menu!</h1>\r\n            <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu}/>\r\n            <h1>{`Table ${tempTables[clickedTable].id + 1} ordered the following items:`}</h1>\r\n            {selectedMenuArr.length > 0 && deliveredOrdersArr.length > 0 ?\r\n                <div className='orderHeaders'>\r\n                    <h3 className='waitingHeader'>Items waiting:</h3>\r\n                    <h3 className='deliveredHeader'>Items delivered:</h3>\r\n                </div> : selectedMenuArr.length > 0 ?\r\n                    <div className='orderHeaders'>\r\n                        <h3 className='waitingHeader'>Items waiting:</h3>\r\n                    </div> : deliveredOrdersArr.length > 0 ?\r\n                        <div className='orderHeaders'>\r\n                            <h3 className='deliveredHeader'>Items delivered:</h3>\r\n                        </div> :\r\n                        <div></div>\r\n            }\r\n            <div className='menuArrayContainer'>\r\n                <div className='selectedMenu'>\r\n                    <Scroll>\r\n                        {selectedMenuArr}\r\n                    </Scroll>\r\n                </div>\r\n                <div className='selectedMenu'>\r\n                    <Scroll>\r\n                        {deliveredOrdersArr}\r\n                    </Scroll>\r\n                </div>\r\n            </div>\r\n            <p>{`For a total of ${tempTables[clickedTable].total}`}</p>\r\n            <button className='addTable' onClick={()=> {\r\n                if (ordersToDisplay.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChange()\r\n                }\r\n            }}>Checkout and add a custom tip</button>\r\n            <button className='addTable' onClick={()=> {\r\n                if (ordersToDisplay.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChangeTen()\r\n                }\r\n            }}>Checkout and add 10% tip</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;","import React from 'react';\r\nimport './ToDoMenu.css'\r\n\r\nconst ToDoMenu = ({name, onSetDone, time, table, status}) => {\r\n    return (\r\n        <div className='todoList'>\r\n            <span>\r\n                {`Order ${name} of table ${table+1}`}\r\n            </span>\r\n            {status === 'waiting' ?\r\n                <button className='addTable' onClick={() => onSetDone({time, table, status})}>Prepared</button> :\r\n                <button className='addTable' onClick={() => onSetDone({time, table, status})}>Delivered</button>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoMenu;","import React from 'react';\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\nimport './Statistics.css'\r\n\r\nconst Statistics = ({logTables, tempTables, setTempTables, getRelevantOrders}) => {\r\n\r\n\r\n    const onSetDone = ({time, table, status}) => {\r\n      const updateTempTables = [...tempTables];\r\n      const indexOfSelectedOrder = updateTempTables[table].orders.findIndex((order) => order.time.getTime() === time);\r\n      if (status === 'waiting') {\r\n          updateTempTables[table].orders[indexOfSelectedOrder].status = 'prepared';\r\n      } else {\r\n          updateTempTables[table].orders[indexOfSelectedOrder].status = 'delivered';\r\n          const ordersDelivered = updateTempTables[table].orders.filter((order) => order.status === 'delivered');\r\n          if (ordersDelivered.length === updateTempTables[table].orders.length) {\r\n              updateTempTables[table].tableActive = 'eating';\r\n          }\r\n      }\r\n      setTempTables(updateTempTables);\r\n    };\r\n\r\n    const waitingArray = getRelevantOrders('waiting');\r\n\r\n    const selectedMenuArr = waitingArray.map((item, i)=> {\r\n        return <ToDoMenu key={i} id={i} name={waitingArray[i][0]} table={waitingArray[i][1]} time={waitingArray[i][2]} status={waitingArray[i][3]} onSetDone={onSetDone} />\r\n    });\r\n\r\n    const deliveredArray = getRelevantOrders('prepared');\r\n\r\n    const deliveredMenuArr = deliveredArray.map((item, i)=> {\r\n        return <ToDoMenu key={i} id={i} name={deliveredArray[i][0]} table={deliveredArray[i][1]} time={deliveredArray[i][2]} onSetDone={onSetDone} />\r\n    });\r\n\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <h2>To Do list:</h2>\r\n            <div className='containerOfContainer'>\r\n                <h3>Waiting list:</h3>\r\n                <Scroll>\r\n                {selectedMenuArr}\r\n                </Scroll>\r\n                <h3>Ready for delivery:</h3>\r\n                <Scroll>\r\n                    {deliveredMenuArr}\r\n                </Scroll>\r\n            </div>\r\n            <h2>Income:</h2>\r\n            <span>{`The total revenue from all checked out tables is ${parseFloat(logTables.total).toFixed(2)}`}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport './CustomizeMenu.css'\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\n\r\nconst CustomizeMenu = ({menuInput, setMenuInput, addNewItemtoMenu, setAddNewItemtoMenu, setTempTables, setCategoryActive, categoryActive, setMenuSearch, tempTables, path, clickedTable, menuSearch, selectedCategory, setSelectedCategory, tempMenu, setTempMenu}) => {\r\n    const updateMenu = () => {\r\n        let existingItems = [];\r\n        for (let i=0; i<tempMenu.length; i++) {\r\n            existingItems.push(tempMenu[i].name.toLowerCase());\r\n        }\r\n        let lastKnownId = tempMenu[tempMenu.length - 1].id;\r\n        if (menuInput.name.length > 0 && !isNaN(Number(menuInput.price)) && menuInput.category.length > 0) {\r\n            if (existingItems.includes(menuInput.name.toLowerCase())) {\r\n                return alert(`The dish ${menuInput.name} already exists, please enter a unique dish name`);\r\n            }\r\n            tempMenu.push({id: lastKnownId + 1, name: menuInput.name, price: menuInput.price, category: menuInput.category, active: true});\r\n            setAddNewItemtoMenu(false);\r\n        } else {\r\n            alert(\"Please enter correct dish details.\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <h2>Here you will be able to customize your menu</h2>\r\n            {addNewItemtoMenu ?\r\n            <div className='addDish'>\r\n                <span>Please enter dish name:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.name = e.target.value;\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter dish price:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.price = Math.abs(Number(e.target.value));\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter a category</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.category = e.target.value.toLowerCase();\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <button className='addTable' onClick={()=> updateMenu()}>Add dish</button>\r\n                <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} setTempMenu={setTempMenu} tempMenu={tempMenu}/>\r\n            </div> :\r\n                <div>\r\n                    <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                    <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu}/>\r\n                    <button className='addTable' onClick={() => setAddNewItemtoMenu(true)}>Add a new menu item</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomizeMenu;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport Tables from \"../components/Tables/Tables\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Statistics from \"../components/Statistics/Statistics\";\r\nimport CustomizeMenu from \"../components/CustomizeMenu/CustomizeMenu\";\r\n\r\nfunction App() {\r\n    /*const [tables, setTables] = useState([]);*/\r\n    const [clickCount, setClickCount] = useState(1);\r\n    const [path, setPath] = useState('tables');\r\n    const [clickedTable, setClickedTable] = useState(0);\r\n    const [logTables, setLogTables] = useState({orders: [], total: 0});\r\n    const [menuSearch, setMenuSearch] = useState('');\r\n    const [menuInput, setMenuInput] = useState({name: '', price: 0, category: ''});\r\n    const [addNewItemtoMenu, setAddNewItemtoMenu] = useState(false);\r\n    const [selectedCategory, setSelectedCategory] = useState('All');\r\n    const [categoryActive, setCategoryActive] = useState(0);\r\n    const [navActive, setNavActive] = useState(0);\r\n    const [clickedOnDelivered, setClickedOnDelivered] = useState(false);\r\n    const [tempTables, setTempTables] = useState([{\r\n        id: 0,\r\n        orders: [],\r\n        total: 0,\r\n        tableActive: 'false',\r\n        timeAdded: new Date()\r\n    }]);\r\n    const [tempMenu, setTempMenu] = useState([{\r\n        id: 1,\r\n        name: 'grilled chicken',\r\n        price: 80,\r\n        category: 'main dishes',\r\n        active: true\r\n    },\r\n        {\r\n            id: 2,\r\n            name: 'ceaser salad',\r\n            price: 55,\r\n            category: 'starters',\r\n            active: true\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'beef steak',\r\n            price: 120,\r\n            category: 'main dishes',\r\n            active: true\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'pepperony',\r\n            price: 90,\r\n            category: 'pizzas',\r\n            active: true\r\n        }]);\r\n\r\n\r\n    const resetWhenChangingPath = () => {\r\n        setCategoryActive(0);\r\n        setSelectedCategory('All');\r\n        setMenuSearch('');\r\n        setMenuInput({name: '', price: 0, category: ''});\r\n        setAddNewItemtoMenu(false);\r\n    };\r\n\r\n    const getRelevantOrders = (status) => {\r\n        let tempWaitingOrders = [];\r\n        if (path === 'Statistics') {\r\n            for (let i=0; i<tempTables.length; i++) {\r\n                tempWaitingOrders.push(tempTables[i].orders.filter((order) => order.status === status));\r\n            }\r\n        } else if (path.includes('order_')) {\r\n            tempWaitingOrders.push(tempTables[clickedTable].orders.filter((order) => order.status === status));\r\n        }\r\n\r\n        const waitingOrders = tempWaitingOrders.flat(1);\r\n\r\n        waitingOrders.sort((a,b)=>a.time.getTime() - b.time.getTime());\r\n\r\n        let ordersDetailsArray = [];\r\n        for (let i=0; i<waitingOrders.length; i++) {\r\n            ordersDetailsArray.push([waitingOrders[i].name, waitingOrders[i].table, waitingOrders[i].time.getTime(), waitingOrders[i].status]);\r\n        }\r\n        return ordersDetailsArray;\r\n    };\r\n\r\n    const enumerateOrders = (relevantOrders) => {\r\n        let orderNamesArr = [];\r\n        for (let i=0; i<relevantOrders.length; i++) {\r\n            orderNamesArr.push(relevantOrders[i][0]);\r\n        }\r\n\r\n        let count = {};\r\n        orderNamesArr.forEach((i) => {\r\n            count[i] = (count[i] || 0) + 1;\r\n        });\r\n        let arrCount = Object.entries(count);\r\n        arrCount.sort();\r\n        return arrCount;\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navigation setNavActive={setNavActive} navActive={navActive} resetWhenChangingPath={resetWhenChangingPath} setPath={setPath} />\r\n            {path === 'tables' ?\r\n                <Tables clickedTable={clickedTable} setClickedTable={setClickedTable} clickCount={clickCount} setClickCount={setClickCount} setTempTables={setTempTables} tempTables={tempTables} path={path} setPath={setPath}/>\r\n                : path.includes(`order_`) ?\r\n                    <Orders clickedOnDelivered={clickedOnDelivered} setClickedOnDelivered={setClickedOnDelivered} tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} enumerateOrders={enumerateOrders} getRelevantOrders={getRelevantOrders} categoryActive={categoryActive} setCategoryActive={setCategoryActive} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} menuSearch={menuSearch} setMenuSearch={setMenuSearch} logTables={logTables} setLogTables={setLogTables} tempTables={tempTables} clickedTable={clickedTable} setTempTables={setTempTables}/> : path.includes('customize') ?\r\n                        <CustomizeMenu tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} setSelectedCategory={setSelectedCategory} selectedCategory={selectedCategory} menuSearch={menuSearch} clickedTable={clickedTable} tempTables={tempTables} setMenuSearch={setMenuSearch} categoryActive={categoryActive} setCategoryActive={setCategoryActive} setTempTables={setTempTables} addNewItemtoMenu={addNewItemtoMenu} setAddNewItemtoMenu={setAddNewItemtoMenu} menuInput={menuInput} setMenuInput={setMenuInput} /> :\r\n                        <Statistics enumerateOrders={enumerateOrders} getRelevantOrders={getRelevantOrders} setTempTables={setTempTables} tempTables={tempTables} logTables={logTables}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}