{"version":3,"sources":["components/Navigation/Navigation.js","components/DeleteBtn/DeleteBtn.js","components/Table/Table.js","components/Tables/Tables.js","components/RemoveMenu/RemoveMenu.js","components/Scroll.js","components/Menu/Menu.js","components/CategoryItem/CategoryItem.js","components/SearchMenu/SearchMenu.js","components/Menu/CategoriesWithMenu.js","components/ReturnDelivered/ReturnDelivered.js","components/ReturnPrepared/ReturnPrepared.js","components/SpecialOrders/SpecialOrders.js","components/Orders/Orders.js","components/ToDoMenu/ToDoMenu.js","components/Statistics/Statistics.js","components/CustomizeMenu/CustomizeMenu.js","components/KitchenStuff/KitchenStuff.js","components/Waiters/Waiters.js","containers/App.js","serviceWorker.js","index.js"],"names":["Navigation","setPath","resetWhenChangingPath","setNavActive","navActive","openNav","setOpenNav","tempTables","burgerKing","className","onClick","waitingOrders","i","length","orders","filter","order","status","preparedOrders","DeleteBtn","setTempTables","id","setClickCount","clickCount","updatedTempTables","item","Table","setClickedTable","tableActive","Tables","path","clickedTable","tablesArray","map","user","key","total","timeAdded","Date","RemoveMenu","name","onRemoveOrderedItem","clickMenuItem","setClickMenuItem","Scroll","props","style","overflowY","maxHeight","margin","children","Menu","price","onClickMenu","tempMenu","onChangeClickMenuItem","source","updatedClickMenuItem","prevState","toggle","indexOfSelectedItem","findIndex","initialMenu","includes","active","CategoryItem","onClickCategory","categoryActive","setCategoryActive","SearchMenu","setMenuSearch","onChange","e","target","value","CategoriesWithMenu","setSelectedCategory","menuSearch","selectedCategory","setTempMenu","push","time","table","comments","commentInput","prompt","priceInput","isNaN","Number","updateTempMenu","alert","inputName","toLowerCase","category","inputPrice","inputCategory","menuItemsToShow","menuOfSelectedCategoryActive","menuArrayActive","menuOfSelectedCategoryHidden","menuArrayHidden","allCategoriesActive","allCategoriesHidden","uniqueCategoriesActive","Set","uniqueCategoriesHidden","categoriesArray","hiddenCategoriesArray","ReturnDelivered","ReturnPrepared","SpecialOrders","comment","clickSpecialItem","setClickSpecialItem","onRemoveSpecialItem","initialState","commentsString","join","Orders","logTables","setLogTables","getRelevantOrders","enumerateOrders","numWaitingOrders","numPreparedOrders","numDeliveredOrders","activeOrders","concat","specialWaitingOrders","specialPreparedOrders","specialDeliveredOrders","arrCount","prepArrCount","orderedItemsArr","indexOfOrderedItem","splice","inputComment","priceOfSelectedItem","activeTempMenu","decrementPriceFromTable","getTime","selectedMenuArr","deliveredOrders","deliveredOrdersArr","preparedOrdersArr","waitingSpecialOrdersArr","preparedSpecialOrdersArr","deliveredSpecialOrdersArr","clearTable","updatedTempTable","logTotal","totalWithTip","returnedItems","updatedLogTables","onExpand","updateExpand","tip","tipChange","tipChangeTen","ToDoMenu","onSetDone","Statistics","logOrdersArray","flat","Infinity","parseFloat","toFixed","CustomizeMenu","menuInput","setMenuInput","addNewItemtoMenu","setAddNewItemtoMenu","type","updatedInput","Math","abs","existingItems","lastKnownId","updateMenu","KitchenStuff","waitingArray","Waiters","deliveredArray","deliveredMenuArr","App","useState","waiting","prepared","delivered","clickedOnDelivered","setClickedOnDelivered","expandTableOrders","setExpandTableOrders","special","tempWaitingOrders","normalOrders","customOrders","sort","a","b","ordersDetailsArray","updateTempTables","indexOfSelectedOrder","updateExpandable","relevantOrders","orderNamesArr","count","forEach","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e8641c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({setPath, resetWhenChangingPath, setNavActive, navActive, openNav, setOpenNav, tempTables}) => {\r\n\r\n    const addClass = () => {\r\n        if (openNav) {\r\n            return 'change';\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    const burgerKing = (\r\n        <div className='burgerPosition'>\r\n            <div className={`burgerContainer ${addClass()}`} onClick={()=> {\r\n                setOpenNav(!openNav);\r\n            }}>\r\n                <div className={`bar1`}></div>\r\n                <div className={`bar2`}></div>\r\n                <div className={`bar3`}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    let waitingOrders = 0;\r\n    for (let i=0; i<tempTables.length; i++) {\r\n        waitingOrders += tempTables[i].orders.filter((order)=> order.status === 'waiting').length;\r\n    }\r\n\r\n    let preparedOrders = 0;\r\n    for (let i=0; i<tempTables.length; i++) {\r\n        preparedOrders += tempTables[i].orders.filter((order)=> order.status === 'prepared').length;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {openNav ?\r\n            <div>\r\n                <div>\r\n                    {burgerKing}\r\n                </div>\r\n                <ul className='NavUl'>\r\n                    <li className={`NavLi ${navActive===0 ? 'navActive' : ''}`} onClick={()=> {setPath('tables'); resetWhenChangingPath(); setNavActive(0);}}>Tables</li>\r\n                    <li className={`NavLi ${navActive===1 ? 'navActive' : ''}`} onClick={()=> {setPath('kitchen'); resetWhenChangingPath(); setNavActive(1);}}>{`Kitchen Stuff ${waitingOrders}`}</li>\r\n                    <li className={`NavLi ${navActive===2 ? 'navActive' : ''}`} onClick={()=> {setPath('waiters'); resetWhenChangingPath(); setNavActive(2);}}>{`Waiters ${preparedOrders}`}</li>\r\n                    <li className={`NavLi ${navActive===3 ? 'navActive' : ''}`} onClick={()=> {setPath('customize'); resetWhenChangingPath(); setNavActive(3);}}>Customize menu</li>\r\n                    <li className={`NavLi ${navActive===4 ? 'navActive' : ''}`} onClick={()=> {setPath('Statistics'); resetWhenChangingPath(); setNavActive(4);}}>Management</li>\r\n                </ul>\r\n            </div> :\r\n              <div>\r\n                  <div>\r\n                    {burgerKing}\r\n                  </div>\r\n                  <ul className='NavUl closeMenu'>\r\n                      <li className={`NavLi ${navActive===0 ? 'navActive' : ''}`} onClick={()=> {setPath('tables'); resetWhenChangingPath(); setNavActive(0);}}>Tables</li>\r\n                      <li className={`NavLi ${navActive===1 ? 'navActive' : ''}`} onClick={()=> {setPath('kitchen'); resetWhenChangingPath(); setNavActive(1);}}>{`Kitchen Stuff ${waitingOrders}`}</li>\r\n                      <li className={`NavLi ${navActive===2 ? 'navActive' : ''}`} onClick={()=> {setPath('waiters'); resetWhenChangingPath(); setNavActive(2);}}>{`Waiters ${preparedOrders}`}</li>\r\n                      <li className={`NavLi ${navActive===3 ? 'navActive' : ''}`} onClick={()=> {setPath('customize'); resetWhenChangingPath(); setNavActive(3);}}>Customize menu</li>\r\n                      <li className={`NavLi ${navActive===4 ? 'navActive' : ''}`} onClick={()=> {setPath('Statistics'); resetWhenChangingPath(); setNavActive(4);}}>Management</li>\r\n                  </ul>\r\n              </div>\r\n            }\r\n        </div>\r\n        );\r\n\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst DeleteBtn = ({tempTables, setTempTables, id, setClickCount, clickCount}) => {\r\n    return (\r\n        <div className='deleteBtnContainer'>\r\n        <button className='deleteBtn' onClick={()=> {\r\n            const updatedTempTables = tempTables.filter((item) => item.id !== id);\r\n            for (let i=0; i<updatedTempTables.length; i++) {\r\n                updatedTempTables[i].id = i;\r\n            }\r\n            setTempTables(updatedTempTables);\r\n            setClickCount(clickCount - 1);\r\n        }}></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteBtn;","import React from 'react';\r\nimport './Table.css'\r\nimport DeleteBtn from \"../DeleteBtn/DeleteBtn\";\r\n\r\nconst Table = ({id, setPath, setClickedTable, setTempTables, tempTables, setClickCount, clickCount}) => {\r\n\r\n    const setActiveTable = () => {\r\n        if (tempTables[id].tableActive === 'false') {\r\n            return 'tableDiv'\r\n        } else if (tempTables[id].tableActive === 'waiting') {\r\n            return 'activeTableDiv'\r\n        } else {\r\n            return 'eatingTableDiv'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={setActiveTable()} id={id}>\r\n            <DeleteBtn id={id} setTempTables={setTempTables} tempTables={tempTables} setClickCount={setClickCount} clickCount={clickCount}/>\r\n            <p className='clickTable' onClick={()=> {\r\n                setClickedTable(id);\r\n                setPath(`order_${id}`)}\r\n\r\n            }>{`Click here to view and edit table number ${id + 1}`}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport './Tables.css';\r\nimport Table from \"../Table/Table\";\r\n\r\nconst Tables = ({tempTables, path, setPath, setTempTables, clickCount, setClickCount, setClickedTable, clickedTable}) => {\r\n\r\n    const tablesArray = tempTables.map((user, i) => <Table setClickCount={setClickCount} clickCount={clickCount} setClickedTable={setClickedTable} setPath={setPath} key={tempTables[i].id} id={tempTables[i].id} tempTables={tempTables} setTempTables={setTempTables} clickedTable={clickedTable} /> );\r\n\r\n    return (\r\n        <div>\r\n            <div className='container'>\r\n                {tablesArray}\r\n            </div>\r\n            <button className={'addTable'} onClick={()=> {\r\n                setClickCount(clickCount + 1);\r\n                setTempTables([...tempTables, {\r\n                    id: clickCount,\r\n                    orders: [],\r\n                    total: 0,\r\n                    tableActive: 'false',\r\n                    timeAdded: new Date()\r\n                }])\r\n\r\n            }\r\n            }>\r\n                Add a new table\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tables;","import React from 'react';\r\n\r\nconst RemoveMenu = ({name, onRemoveOrderedItem, clickMenuItem, setClickMenuItem}) => {\r\n\r\n    const updateMenu = (\r\n        <div>\r\n            {}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RemoveMenu;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"menuList\" style={{ overflowY: 'scroll', maxHeight: '250px', margin: '1%' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './Menu.css';\r\n\r\nconst Menu = ({id, name, price, onClickMenu, clickMenuItem, setClickMenuItem, path, tempMenu}) => {\r\n\r\n    const onChangeClickMenuItem = (source) => {\r\n        const updatedClickMenuItem = {...clickMenuItem};\r\n        updatedClickMenuItem.status = `${id}`;\r\n        if (updatedClickMenuItem.status === source) {\r\n            if (updatedClickMenuItem.prevState !== source) {\r\n                updatedClickMenuItem.toggle = true;\r\n                updatedClickMenuItem.prevState = source;\r\n            } else {\r\n                updatedClickMenuItem.toggle = !updatedClickMenuItem.toggle;\r\n            }\r\n\r\n        } else {\r\n            onClickMenu({name, id, source, price})\r\n        }\r\n        setClickMenuItem(updatedClickMenuItem);\r\n    };\r\n\r\n    const indexOfSelectedItem = tempMenu.findIndex((item) => item.id === id);\r\n\r\n    const initialMenu =\r\n        (\r\n            <div className='menuContainer'>\r\n                {clickMenuItem.toggle === true && clickMenuItem.status === `${id}` ?\r\n                <button className='addTable' onClick={()=> {\r\n                    onChangeClickMenuItem(`${id}`)\r\n                }}>&#8911;</button> :\r\n                <button className='addTable' onClick={()=> {\r\n                    onChangeClickMenuItem(`${id}`)\r\n                }}>&#8910;</button>\r\n                }\r\n                <span className='menuItem'>\r\n                    {name}\r\n                </span>\r\n                <span className='menuItem'>\r\n                    {price}\r\n                </span>\r\n                {path.includes('order_') ?\r\n                    <button className='addTable' onClick={() => onChangeClickMenuItem('add')}>&oplus;</button> : null\r\n                }\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {clickMenuItem.status === `${id}` && path.includes('order_') && clickMenuItem.toggle === true ?\r\n                <div>\r\n                    {initialMenu}\r\n                    <button className='addTable' onClick={()=> onChangeClickMenuItem('addCustom')}>Add with a custom price</button>\r\n                    <button className='addTable' onClick={()=> onChangeClickMenuItem('addComment')}>Add with a comment</button>\r\n                    <button className='addTable' onClick={()=> onChangeClickMenuItem('addCustomComment')}>Add with a custom price and a comment</button>\r\n                </div> : clickMenuItem.status === `${id}` && path.includes('custom')  && clickMenuItem.toggle === true ?\r\n                <div>\r\n                    {initialMenu}\r\n                    {tempMenu[indexOfSelectedItem].active === false ?\r\n                    <button className='addTable' onClick={() => onChangeClickMenuItem('recover')}>Recover dish</button> :\r\n                    <div>\r\n                        <button className='addTable' onClick={() => onChangeClickMenuItem('Remove')}>Remove dish</button>\r\n                        <button className='addTable' onClick={()=> onChangeClickMenuItem('updateName')}>Update dish name</button>\r\n                        <button className='addTable' onClick={()=> onChangeClickMenuItem('updatePrice')}>Update dish price</button>\r\n                        <button className='addTable' onClick={()=> onChangeClickMenuItem('updateCategory')}>Update dish category</button>\r\n                    </div>\r\n                    }\r\n                </div> :\r\n                <div>\r\n                    {initialMenu}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst CategoryItem = ({name, onClickCategory, categoryActive, setCategoryActive, id}) => {\r\n    return (\r\n      <div className={`menuContainer`} id={id===categoryActive ? 'categoryActive' : ''} onClick={() => {\r\n          onClickCategory({name});\r\n          setCategoryActive(id);\r\n      }}>\r\n          <span className='menuItem'>\r\n              {name}\r\n          </span>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default CategoryItem;","import React from 'react';\r\n\r\nconst SearchMenu = ({setMenuSearch}) => {\r\n  return (\r\n    <div>\r\n        <input className=\"searchBox\" onChange={(e) => setMenuSearch(e.target.value)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchMenu;","import React from 'react';\r\nimport Menu from \"./Menu\";\r\nimport CategoryItem from \"../CategoryItem/CategoryItem\";\r\nimport Scroll from \"../Scroll\";\r\nimport SearchMenu from \"../SearchMenu/SearchMenu\";\r\n\r\nconst CategoriesWithMenu = ({tempTables, clickedTable, setTempTables, path, setSelectedCategory, setMenuSearch, menuSearch, selectedCategory, categoryActive, setCategoryActive, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem}) => {\r\n    const onClickMenu = ({name, price, source, id}) => {\r\n        if (path.includes('order_')) {\r\n            const updatedTempTables = [...tempTables];\r\n            if (source === 'add') {\r\n                updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [], price: price});\r\n                updatedTempTables[clickedTable].total += price;\r\n            } else if (source === 'addComment') {\r\n                const commentInput = prompt('Enter your custom comment:');\r\n                if (commentInput) {\r\n                    updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [commentInput], price: price});\r\n                    updatedTempTables[clickedTable].total += price;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else if (source === 'addCustom') {\r\n                const priceInput = prompt('Enter your custom price:');\r\n                if (priceInput && !isNaN(Number(priceInput))) {\r\n                    updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [`custom price ${priceInput}`], price: priceInput});\r\n                    updatedTempTables[clickedTable].total += Number(priceInput);\r\n                } else {\r\n                    return;\r\n                }\r\n            } else if (source === 'addCustomComment') {\r\n                const priceInput = prompt('Enter your custom price:');\r\n                if (priceInput && !isNaN(Number(priceInput))) {\r\n                    const commentInput = prompt('Enter your custom comment:');\r\n                    if (commentInput) {\r\n                        updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [`custom price ${priceInput}`, commentInput], price: priceInput});\r\n                        updatedTempTables[clickedTable].total += Number(priceInput);\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            updatedTempTables[clickedTable].tableActive = 'waiting';\r\n            setTempTables(updatedTempTables);\r\n        } else {\r\n            const indexOfSelectedItem = tempMenu.findIndex((item) => item.id === id);\r\n            const updateTempMenu = [...tempMenu];\r\n            if (source === 'Remove') {\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n            } else if (source === 'recover') {\r\n                if (updateTempMenu.filter((item) => item.active === true && item.name === name).length > 0) {\r\n                    alert('Unable to recover a dish with the same name as another active dish.')\r\n                } else {\r\n                    updateTempMenu[indexOfSelectedItem].active = true;\r\n                }\r\n            } else if (source === 'updateName') {\r\n                let inputName = '';\r\n                inputName = prompt('Please provide a new name for the dish');\r\n                if (inputName) {\r\n                    if (inputName.length > 0) {\r\n                        while (tempMenu.filter((item) => item.name.toLowerCase() === inputName.toLowerCase()).length > 0) {\r\n                            inputName = prompt('Given name already exists, please provide a unique new name');\r\n                            if (inputName) {\r\n                                if (inputName.length > 0) {\r\n                                    inputName.toLowerCase();\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n                updateTempMenu.push({\r\n                    id: updateTempMenu.length + 1,\r\n                    name: inputName,\r\n                    price: updateTempMenu[indexOfSelectedItem].price,\r\n                    category: updateTempMenu[indexOfSelectedItem].category,\r\n                    active: true\r\n                });\r\n            } else if (source === 'updatePrice') {\r\n                let inputPrice = null;\r\n                inputPrice = Number(prompt('Please provide a new price for the dish'));\r\n                if (inputPrice) {\r\n                    while (isNaN(inputPrice) || inputPrice === 0) {\r\n                        inputPrice = Number(prompt('Please provide a valid price for the dish'));\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n                updateTempMenu.push({\r\n                    id: updateTempMenu.length + 1,\r\n                    name: updateTempMenu[indexOfSelectedItem].name,\r\n                    price: inputPrice,\r\n                    category: updateTempMenu[indexOfSelectedItem].category,\r\n                    active: true\r\n                });\r\n            } else if (source === 'updateCategory') {\r\n                let inputCategory = prompt('Please provide a category name');\r\n                if (inputCategory) {\r\n                    if (inputCategory.length > 0) {\r\n                        updateTempMenu[indexOfSelectedItem].category = inputCategory.toLowerCase();\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            setTempMenu(updateTempMenu);\r\n        }\r\n\r\n    };\r\n\r\n    const onClickCategory = ({name}) => {\r\n        setSelectedCategory(name);\r\n        setMenuSearch('');\r\n    };\r\n    const menuItemsToShow = (status) => {\r\n        const activeMenuItems = tempMenu.filter((item) => item.active === status);\r\n        const menuOfSelectedCategory = activeMenuItems.filter((item) => {\r\n            if (selectedCategory === 'All' && !menuSearch.length > 0) {\r\n                return item;\r\n            } else if (menuSearch.length > 0) {\r\n                return item.name.toLowerCase().includes(menuSearch.toLowerCase());\r\n            }\r\n            return item.category === selectedCategory;\r\n        });\r\n        return menuOfSelectedCategory;\r\n    };\r\n\r\n    const menuOfSelectedCategoryActive = menuItemsToShow(true);\r\n\r\n    const menuArrayActive = menuOfSelectedCategoryActive.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryActive[i].id} id={menuOfSelectedCategoryActive[i].id} name={menuOfSelectedCategoryActive[i].name} price={menuOfSelectedCategoryActive[i].price} onClickMenu={onClickMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} path={path} tempMenu={tempMenu}/>\r\n    });\r\n\r\n    const menuOfSelectedCategoryHidden = menuItemsToShow(false);\r\n\r\n    const menuArrayHidden = menuOfSelectedCategoryHidden.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryHidden[i].id} id={menuOfSelectedCategoryHidden[i].id} name={menuOfSelectedCategoryHidden[i].name} price={menuOfSelectedCategoryHidden[i].price} onClickMenu={onClickMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} path={path} tempMenu={tempMenu}/>\r\n    });\r\n\r\n    let allCategoriesActive = ['All'];\r\n    let allCategoriesHidden = ['All'];\r\n    for (let i=0; i<tempMenu.length; i++) {\r\n        if (tempMenu[i].active === true) {\r\n            allCategoriesActive.push(tempMenu[i].category)\r\n        } else {\r\n            allCategoriesHidden.push(tempMenu[i].category)\r\n        }\r\n    }\r\n    const uniqueCategoriesActive = [...new Set(allCategoriesActive)];\r\n\r\n    const uniqueCategoriesHidden = [...new Set(allCategoriesHidden)];\r\n\r\n    const categoriesArray = uniqueCategoriesActive.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n    const hiddenCategoriesArray = uniqueCategoriesHidden.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='menuArray'>\r\n                <Scroll>\r\n                    {categoriesArray}\r\n                </Scroll>\r\n                <Scroll>\r\n                    {menuArrayActive}\r\n                </Scroll>\r\n            </div>\r\n            {path === 'customize' && hiddenCategoriesArray.length > 1 ?\r\n            <div>\r\n                <h3>Click a menu item to bring it back from the trash</h3>\r\n                <div className='menuArray'>\r\n                    <Scroll>\r\n                        {hiddenCategoriesArray}\r\n                    </Scroll>\r\n                    <Scroll>\r\n                        {menuArrayHidden}\r\n                    </Scroll>\r\n                </div>\r\n            </div>: <span></span>\r\n                }\r\n            <div className='searchContainer'>\r\n                <span id='searchText'>Search menu item:</span>\r\n                <SearchMenu setMenuSearch={setMenuSearch}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoriesWithMenu;","import React from 'react';\r\n\r\nconst ReturnDelivered = ({name, onRemoveOrderedItem, clickMenuItem, setClickMenuItem}) => {\r\n    return (\r\n        <div>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnDelivered;","import React from 'react';\r\n\r\nconst ReturnPrepared = ({name, onRemoveOrderedItem, clickMenuItem, setClickMenuItem}) => {\r\n    return (\r\n        <div>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'prepared')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'prepared')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                    <button>Expand</button>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnPrepared;","import React from 'react';\r\n\r\nconst SpecialOrders = ({name, comment, time, status, price, clickSpecialItem, setClickSpecialItem, onRemoveSpecialItem}) => {\r\n\r\n\r\n    const initialState = (\r\n        <div>\r\n            <button className='deleteBtn' onClick={()=> onRemoveSpecialItem({time, status, price})}></button>\r\n            <span>{name}</span>\r\n            {clickSpecialItem === time ?\r\n                <button onClick={() => setClickSpecialItem('false')}>Hide info</button> :\r\n                <button onClick={() => setClickSpecialItem(time)}>More info</button>\r\n            }\r\n        </div>\r\n    );\r\n\r\n    const commentsString = comment.join(', ');\r\n\r\n    return (\r\n        <div className='foodContainer'>\r\n            {clickSpecialItem === time ?\r\n                <div>\r\n                    {initialState}\r\n                    <p>{commentsString}</p>\r\n                </div> :\r\n                <div>\r\n                    {initialState}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpecialOrders;","import React from 'react';\r\nimport './Orders.css'\r\nimport RemoveMenu from \"../RemoveMenu/RemoveMenu\";\r\nimport Scroll from \"../Scroll\";\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\nimport ReturnDelivered from \"../ReturnDelivered/ReturnDelivered\";\r\nimport ReturnPrepared from \"../ReturnPrepared/ReturnPrepared\";\r\nimport SpecialOrders from \"../SpecialOrders/SpecialOrders\";\r\n\r\nconst Orders = ({path, tempTables, clickedTable, setTempTables, logTables, setLogTables, setMenuSearch, menuSearch, selectedCategory, setSelectedCategory, categoryActive, setCategoryActive, getRelevantOrders, enumerateOrders, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem, clickSpecialItem, setClickSpecialItem, setPath}) => {\r\n\r\n    let numWaitingOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'waiting').length;\r\n    let numPreparedOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'prepared').length;\r\n    let numDeliveredOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'delivered').length;\r\n\r\n    const waitingOrders = getRelevantOrders('waiting', false);\r\n    const preparedOrders = getRelevantOrders('prepared', false);\r\n    const activeOrders = waitingOrders.concat(preparedOrders);\r\n\r\n    const specialWaitingOrders = getRelevantOrders('waiting', true);\r\n    const specialPreparedOrders = getRelevantOrders('prepared', true);\r\n    const specialDeliveredOrders = getRelevantOrders('delivered', true);\r\n\r\n\r\n    const arrCount = enumerateOrders(waitingOrders);\r\n    const prepArrCount = enumerateOrders(preparedOrders);\r\n\r\n    const onRemoveOrderedItem = ({name}, status) => {\r\n        const updatedTempTables = [...tempTables];\r\n        const orderedItemsArr = updatedTempTables[clickedTable].orders;\r\n        let indexOfOrderedItem = 0;\r\n\r\n\r\n        if (status === 'waiting') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'waiting') && (item.comments.length === 0));\r\n            updatedTempTables[clickedTable].orders.splice(indexOfOrderedItem, 1);\r\n        } else if (status === 'delivered') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'delivered') && (item.comments.length === 0));\r\n            const inputComment = prompt('Why was the dish returned?');\r\n            if (inputComment) {\r\n                updatedTempTables[clickedTable].orders[indexOfOrderedItem].comments.push(`return reason: ${inputComment}`);\r\n            } else {\r\n                return;\r\n            }\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        } else {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'prepared') && (item.comments.length === 0));\r\n            const inputComment = prompt('Why was the dish returned?');\r\n            if (inputComment) {\r\n                updatedTempTables[clickedTable].orders[indexOfOrderedItem].comments.push(`return reason: ${inputComment}`);\r\n            } else {\r\n                return;\r\n            }\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        }\r\n        let priceOfSelectedItem = 0;\r\n        const activeTempMenu = tempMenu.filter((item) => item.active === true);\r\n        for (let i=0; i<activeTempMenu.length; i++)\r\n            if (activeTempMenu[i].name === name[0]) {\r\n                priceOfSelectedItem = activeTempMenu[i].price;\r\n            }\r\n        decrementPriceFromTable(priceOfSelectedItem);\r\n        setTempTables(updatedTempTables);\r\n    };\r\n\r\n    const onRemoveSpecialItem = ({time, status, price}) => {\r\n        const updatedTempTables = [...tempTables];\r\n        const orderedItemsArr = updatedTempTables[clickedTable].orders;\r\n        let indexOfOrderedItem = 0;\r\n        if (status === 'waiting') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.time.getTime() === time);\r\n            updatedTempTables[clickedTable].orders.splice(indexOfOrderedItem, 1);\r\n        } else {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.time.getTime() === time);\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        }\r\n        decrementPriceFromTable(price);\r\n        setTempTables(updatedTempTables);\r\n\r\n    };\r\n\r\n    const decrementPriceFromTable = (price) => {\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total -= price;\r\n        if (updatedTempTables[clickedTable].total === 0 && updatedTempTables[clickedTable].orders.length === 0) {\r\n            updatedTempTables[clickedTable].tableActive = 'false';\r\n            updatedTempTables[clickedTable].timeAdded = new Date();\r\n        }\r\n        setTempTables(updatedTempTables);\r\n    };\r\n\r\n    const selectedMenuArr = arrCount.map((item, i)=> {\r\n        return <RemoveMenu key={i} id={i} name={arrCount[i]} onRemoveOrderedItem={onRemoveOrderedItem} setClickMenuItem={setClickMenuItem} clickMenuItem={clickMenuItem} />\r\n    });\r\n\r\n    const tempDeliveredOrders = getRelevantOrders('delivered', false);\r\n    const deliveredOrders = enumerateOrders(tempDeliveredOrders);\r\n\r\n    const deliveredOrdersArr = deliveredOrders.map((item, i)=> {\r\n        return <ReturnDelivered key={i} id={i} name={deliveredOrders[i]} onRemoveOrderedItem={onRemoveOrderedItem} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} />\r\n    });\r\n\r\n    const preparedOrdersArr = prepArrCount.map((item, i)=> {\r\n        return <ReturnPrepared key={i} id={i} name={prepArrCount[i]} onRemoveOrderedItem={onRemoveOrderedItem} setClickMenuItem={setClickMenuItem} clickMenuItem={clickMenuItem} />\r\n    });\r\n\r\n    const waitingSpecialOrdersArr = specialWaitingOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialWaitingOrders[i][0]} time={specialWaitingOrders[i][2]} status={specialWaitingOrders[i][3]} comment={specialWaitingOrders[i][4]} price={specialWaitingOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n    const preparedSpecialOrdersArr = specialPreparedOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialPreparedOrders[i][0]} time={specialPreparedOrders[i][2]} status={specialPreparedOrders[i][3]} comment={specialPreparedOrders[i][4]} price={specialPreparedOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n    const deliveredSpecialOrdersArr = specialDeliveredOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialDeliveredOrders[i][0]} time={specialDeliveredOrders[i][2]} status={specialDeliveredOrders[i][3]} comment={specialDeliveredOrders[i][4]} price={specialDeliveredOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n\r\n    const clearTable = () => {\r\n        const updatedTempTable = [...tempTables];\r\n        updatedTempTable[clickedTable] = {id: clickedTable, orders: [], total: 0, tableActive: 'false', timeAdded: new Date()};\r\n        setTempTables(updatedTempTable);\r\n    };\r\n\r\n    const logTotal = () => {\r\n        const totalWithTip = tempTables[clickedTable].total;\r\n        const returnedItems = tempTables[clickedTable].orders.filter((order)=> order.status === 'returned');\r\n        const updatedLogTables = {...logTables};\r\n        updatedLogTables.total = logTables.total + totalWithTip;\r\n        updatedLogTables.orders.push(returnedItems);\r\n        setLogTables(updatedLogTables);\r\n    };\r\n\r\n    const tipChange = () => {\r\n        let tip = Number(prompt('Is there a tip?', '0'));\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total += tip;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    const tipChangeTen = () => {\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total *= 1.1;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    const onExpand = (source) => {\r\n      const updateExpand = {...clickMenuItem};\r\n      updateExpand.status = source;\r\n        if ((source === 'waitingOrders' || source === 'preparedOrders' || source === 'deliveredOrders')){\r\n            if (updateExpand.status === source) {\r\n                if (updateExpand.prevState !== source) {\r\n                    updateExpand.toggle = true;\r\n                    updateExpand.prevState = source;\r\n                } else {\r\n                    updateExpand.toggle = !updateExpand.toggle;\r\n                }\r\n            }\r\n            setClickMenuItem(updateExpand);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <button className='addTable' onClick={()=> setPath('tables')}>Go back</button>\r\n            <h1>This is da menu!</h1>\r\n            <CategoriesWithMenu clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu}/>\r\n            <h1>{`Table ${tempTables[clickedTable].id + 1} ordered the following items:`}</h1>\r\n            <div className='menuArrayContainer'>\r\n                {numWaitingOrders > 0 ?\r\n                    <div className='selectedMenu'>\r\n                        {clickMenuItem.status === 'waitingOrders' && clickMenuItem.toggle === true ?\r\n                            <div>\r\n                                <div className='expandableTitle'>\r\n                                    <h3>{`Waiting orders: ${numWaitingOrders}`}</h3>\r\n                                    <button className='addTable' onClick={() => onExpand('waitingOrders')}>&#8911;</button>\r\n                                </div>\r\n                                <Scroll>\r\n                                    {selectedMenuArr}\r\n                                    {waitingSpecialOrdersArr}\r\n                                </Scroll>\r\n                            </div> :\r\n                            <div className='expandableTitle'>\r\n                                <h3>{`Waiting orders: ${numWaitingOrders}`}</h3>\r\n                                <button className='addTable' onClick={() => onExpand('waitingOrders')}>&#8910;</button>\r\n                            </div>\r\n                        }\r\n                    </div> : null\r\n                }\r\n                <div className='selectedMenu'>\r\n                    {numPreparedOrders > 0 ?\r\n                        <div>\r\n                            {clickMenuItem.status === 'preparedOrders' && clickMenuItem.toggle === true ?\r\n                                <div>\r\n                                    <div className='expandableTitle'>\r\n                                        <h3>{`Ready for delivery: ${numPreparedOrders}`}</h3>\r\n                                        <button className='addTable' onClick={() => onExpand('preparedOrders')}>&#8911;</button>\r\n                                    </div>\r\n                                    <Scroll>\r\n                                        {preparedOrdersArr}\r\n                                        {preparedSpecialOrdersArr}\r\n                                    </Scroll>\r\n                                </div> :\r\n                                <div className='expandableTitle'>\r\n                                    <h3>{`Ready for delivery: ${numPreparedOrders}`}</h3>\r\n                                    <button className='addTable' onClick={() => onExpand('preparedOrders')}>&#8910;</button>\r\n                                </div>\r\n                            }\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n                <div className='selectedMenu'>\r\n                    {numDeliveredOrders > 0 ?\r\n                        <div>\r\n                            {clickMenuItem.status === 'deliveredOrders' && clickMenuItem.toggle === true ?\r\n                                <div>\r\n                                    <div className='expandableTitle'>\r\n                                        <h3>{`Orders delivered: ${numDeliveredOrders}`}</h3>\r\n                                        <button className='addTable' onClick={() => onExpand('deliveredOrders')}>&#8911;</button>\r\n                                    </div>\r\n                                    <Scroll>\r\n                                        {deliveredOrdersArr}\r\n                                        {deliveredSpecialOrdersArr}\r\n                                    </Scroll>\r\n                                </div> :\r\n                                <div className='expandableTitle'>\r\n                                    <h3>{`Orders delivered: ${numDeliveredOrders}`}</h3>\r\n                                    <button className='addTable' onClick={() => onExpand('deliveredOrders')}>&#8910;</button>\r\n                                </div>\r\n                            }\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <p>{`For a total of ${tempTables[clickedTable].total}`}</p>\r\n            <button className='addTable' onClick={()=> {\r\n                if (activeOrders.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChange()\r\n                }\r\n            }}>Checkout and add a custom tip</button>\r\n            <button className='addTable' onClick={()=> {\r\n                if (activeOrders.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChangeTen()\r\n                }\r\n            }}>Checkout and add 10% tip</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;","import React from 'react';\r\nimport './ToDoMenu.css'\r\n\r\nconst ToDoMenu = ({name, onSetDone, time, table, status, comment, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const commentsString = comment.join(', ');\r\n\r\n    const initialState = (\r\n        <div>\r\n            {commentsString.length > 0 && clickSpecialItem === 'false' ?\r\n            <div>\r\n                <span>\r\n                    {`Order ${name} of table ${table + 1}`}\r\n                </span>\r\n                <button onClick={()=> setClickSpecialItem(time)}>More info</button>\r\n            </div> : commentsString.length > 0 && clickSpecialItem === time ?\r\n            <div>\r\n                <span>\r\n                    {`Order ${name} of table ${table + 1}`}\r\n                </span>\r\n                <button onClick={()=> setClickSpecialItem('false')}>Less info</button>\r\n                <span>{commentsString}</span>\r\n            </div> :\r\n            <span>\r\n                {`Order ${name} of table ${table + 1}`}\r\n            </span>\r\n            }\r\n            {status === 'waiting' ?\r\n                <button className='addTable' onClick={() => onSetDone({time, table, status})}>Prepared</button> : status === 'prepared' ?\r\n                    <button className='addTable' onClick={() => onSetDone({time, table, status})}>Delivered</button> :\r\n                    null\r\n            }\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className='todoList'>\r\n            {initialState}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoMenu;","import React from 'react';\r\nimport './Statistics.css'\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst Statistics = ({logTables, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const logOrdersArray = logTables.orders.flat(Infinity);\r\n\r\n    const returnedItems = logOrdersArray.map((order, i) => {\r\n        return <ToDoMenu key={i} id={i} name={logOrdersArray[i].name} table={logOrdersArray[i].table} time={logOrdersArray[i].time.getTime()}\r\n                         status={logOrdersArray[i].status} comment={logOrdersArray[i].comments} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} />\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n                <h2>Income:</h2>\r\n                <span>{`The total revenue from all checked out tables is ${parseFloat(logTables.total).toFixed(2)}`}</span>\r\n                <div>\r\n                    <h3>The following orders were returned:</h3>\r\n                    <Scroll>\r\n                        {returnedItems}\r\n                    </Scroll>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport './CustomizeMenu.css'\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\n\r\nconst CustomizeMenu = ({menuInput, setMenuInput, addNewItemtoMenu, setAddNewItemtoMenu, setTempTables, setCategoryActive, categoryActive, setMenuSearch, tempTables, path, clickedTable, menuSearch, selectedCategory, setSelectedCategory, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem}) => {\r\n    const updateMenu = () => {\r\n        let existingItems = [];\r\n        for (let i=0; i<tempMenu.length; i++) {\r\n            existingItems.push(tempMenu[i].name.toLowerCase());\r\n        }\r\n        let lastKnownId = tempMenu[tempMenu.length - 1].id;\r\n        if (menuInput.name.length > 0 && !isNaN(Number(menuInput.price)) && menuInput.category.length > 0) {\r\n            if (existingItems.includes(menuInput.name.toLowerCase())) {\r\n                return alert(`The dish ${menuInput.name} already exists, please enter a unique dish name`);\r\n            }\r\n            tempMenu.push({id: lastKnownId + 1, name: menuInput.name, price: menuInput.price, category: menuInput.category, active: true});\r\n            setAddNewItemtoMenu(false);\r\n        } else {\r\n            alert(\"Please enter correct dish details.\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <h2>Here you will be able to customize your menu</h2>\r\n            {addNewItemtoMenu ?\r\n            <div className='addDish'>\r\n                <span>Please enter dish name:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.name = e.target.value;\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter dish price:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.price = Math.abs(Number(e.target.value));\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter a category</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.category = e.target.value.toLowerCase();\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <button className='addTable' onClick={()=> updateMenu()}>Add dish</button>\r\n                <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} setTempMenu={setTempMenu} tempMenu={tempMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem}/>\r\n            </div> :\r\n                <div>\r\n                    <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                    <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem}/>\r\n                    <button className='addTable' onClick={() => setAddNewItemtoMenu(true)}>Add a new menu item</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomizeMenu;","import React from 'react';\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst KitchenStuff = ({getRelevantOrders, onSetDone, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const waitingArray = getRelevantOrders('waiting');\r\n\r\n    const selectedMenuArr = waitingArray.map((item, i) => {\r\n        return <ToDoMenu key={i} id={i} name={waitingArray[i][0]} table={waitingArray[i][1]} time={waitingArray[i][2]}\r\n                         status={waitingArray[i][3]} comment={waitingArray[i][4]} onSetDone={onSetDone} setClickSpecialItem={setClickSpecialItem} clickSpecialItem={clickSpecialItem}/>\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <div className='containerOfContainer'>\r\n                <h3>Waiting list:</h3>\r\n                <Scroll>\r\n                    {selectedMenuArr}\r\n                </Scroll>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KitchenStuff;","import React from 'react';\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst Waiters = ({getRelevantOrders, onSetDone, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const deliveredArray = getRelevantOrders('prepared');\r\n\r\n    const deliveredMenuArr = deliveredArray.map((item, i)=> {\r\n        return <ToDoMenu key={i} id={i} name={deliveredArray[i][0]} table={deliveredArray[i][1]} time={deliveredArray[i][2]} status={deliveredArray[i][3]} comment={deliveredArray[i][4]} onSetDone={onSetDone} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} />\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <div className='containerOfContainer'>\r\n                <h3>Ready for delivery:</h3>\r\n                <Scroll>\r\n                    {deliveredMenuArr}\r\n                </Scroll>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Waiters;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport Tables from \"../components/Tables/Tables\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Statistics from \"../components/Statistics/Statistics\";\r\nimport CustomizeMenu from \"../components/CustomizeMenu/CustomizeMenu\";\r\nimport KitchenStuff from \"../components/KitchenStuff/KitchenStuff\";\r\nimport Waiters from \"../components/Waiters/Waiters\";\r\n\r\nfunction App() {\r\n    /*const [tables, setTables] = useState([]);*/\r\n    const [clickCount, setClickCount] = useState(1);\r\n    const [path, setPath] = useState('tables');\r\n    const [clickedTable, setClickedTable] = useState(0);\r\n    const [logTables, setLogTables] = useState({orders: [], total: 0, waiting: 0, prepared: 0, delivered: 0});\r\n    const [menuSearch, setMenuSearch] = useState('');\r\n    const [menuInput, setMenuInput] = useState({name: '', price: 0, category: ''});\r\n    const [addNewItemtoMenu, setAddNewItemtoMenu] = useState(false);\r\n    const [selectedCategory, setSelectedCategory] = useState('All');\r\n    const [categoryActive, setCategoryActive] = useState(0);\r\n    const [navActive, setNavActive] = useState(0);\r\n    const [clickedOnDelivered, setClickedOnDelivered] = useState(false);\r\n    const [clickMenuItem, setClickMenuItem] = useState({status: 'false', toggle: false, prevState: ''});\r\n    const [clickSpecialItem, setClickSpecialItem] = useState('false');\r\n    const [openNav, setOpenNav] = useState(false);\r\n    const [expandTableOrders, setExpandTableOrders] = useState({status: 'false', toggle: false});\r\n    const [tempTables, setTempTables] = useState([{\r\n        id: 0,\r\n        orders: [],\r\n        total: 0,\r\n        tableActive: 'false',\r\n        timeAdded: new Date()\r\n    }]);\r\n    const [tempMenu, setTempMenu] = useState([{\r\n        id: 1,\r\n        name: 'grilled chicken',\r\n        price: 80,\r\n        category: 'main dishes',\r\n        active: true\r\n    },\r\n        {\r\n            id: 2,\r\n            name: 'ceaser salad',\r\n            price: 55,\r\n            category: 'starters',\r\n            active: true\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'beef steak',\r\n            price: 120,\r\n            category: 'main dishes',\r\n            active: true\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'pepperony',\r\n            price: 90,\r\n            category: 'pizzas',\r\n            active: true\r\n        }]);\r\n\r\n\r\n    const resetWhenChangingPath = () => {\r\n        setCategoryActive(0);\r\n        setSelectedCategory('All');\r\n        setMenuSearch('');\r\n        setMenuInput({name: '', price: 0, category: ''});\r\n        setAddNewItemtoMenu(false);\r\n        const updatedClickMenuItem = {...clickMenuItem};\r\n        updatedClickMenuItem.status = 'false';\r\n        updatedClickMenuItem.toggle = false;\r\n        setClickMenuItem(updatedClickMenuItem);\r\n        setClickSpecialItem('false');\r\n        setOpenNav(false);\r\n        const updateExpandable = {...expandTableOrders};\r\n        updateExpandable.status = 'false';\r\n        updateExpandable.toggle = false;\r\n        setExpandTableOrders(updateExpandable);\r\n    };\r\n\r\n    const getRelevantOrders = (status, special) => {\r\n        let tempWaitingOrders = [];\r\n        if (path === 'waiters' || path === 'kitchen') {\r\n            for (let i=0; i<tempTables.length; i++) {\r\n                tempWaitingOrders.push(tempTables[i].orders.filter((order) => order.status === status));\r\n            }\r\n        } else if (path.includes('order_')) {\r\n            const normalOrders = tempTables[clickedTable].orders.filter((order) => order.status === status && (order.comments.length === 0));\r\n            const customOrders = tempTables[clickedTable].orders.filter((order)=> order.status === status && order.comments.length > 0);\r\n            if (special) {\r\n                tempWaitingOrders.push(customOrders);\r\n            } else {\r\n                tempWaitingOrders.push(normalOrders);\r\n            }\r\n        }\r\n\r\n        const waitingOrders = tempWaitingOrders.flat(1);\r\n\r\n        waitingOrders.sort((a,b)=>a.time.getTime() - b.time.getTime());\r\n\r\n        let ordersDetailsArray = [];\r\n        for (let i=0; i<waitingOrders.length; i++) {\r\n            ordersDetailsArray.push([waitingOrders[i].name, waitingOrders[i].table, waitingOrders[i].time.getTime(), waitingOrders[i].status, waitingOrders[i].comments, waitingOrders[i].price]);\r\n        }\r\n        return ordersDetailsArray;\r\n    };\r\n\r\n    const enumerateOrders = (relevantOrders) => {\r\n        let orderNamesArr = [];\r\n        for (let i=0; i<relevantOrders.length; i++) {\r\n            orderNamesArr.push(relevantOrders[i][0]);\r\n        }\r\n\r\n        let count = {};\r\n        orderNamesArr.forEach((i) => {\r\n            count[i] = (count[i] || 0) + 1;\r\n        });\r\n        let arrCount = Object.entries(count);\r\n        arrCount.sort();\r\n        return arrCount;\r\n    };\r\n\r\n    const onSetDone = ({time, table, status}) => {\r\n        const updateTempTables = [...tempTables];\r\n        const indexOfSelectedOrder = updateTempTables[table].orders.findIndex((order) => order.time.getTime() === time);\r\n        if (status === 'waiting') {\r\n            updateTempTables[table].orders[indexOfSelectedOrder].status = 'prepared';\r\n        } else {\r\n            updateTempTables[table].orders[indexOfSelectedOrder].status = 'delivered';\r\n            const ordersDelivered = updateTempTables[table].orders.filter((order) => order.status === 'delivered');\r\n            if (ordersDelivered.length === updateTempTables[table].orders.filter((order)=> order.status !== 'returned').length) {\r\n                updateTempTables[table].tableActive = 'eating';\r\n            }\r\n        }\r\n        setTempTables(updateTempTables);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navigation tempTables={tempTables} openNav={openNav} setOpenNav={setOpenNav} setNavActive={setNavActive} navActive={navActive} resetWhenChangingPath={resetWhenChangingPath} setPath={setPath} />\r\n            {path === 'tables' ?\r\n                <Tables clickedTable={clickedTable} setClickedTable={setClickedTable} clickCount={clickCount} setClickCount={setClickCount} setTempTables={setTempTables} tempTables={tempTables} path={path} setPath={setPath}/>\r\n                : path.includes(`order_`) ?\r\n                    <Orders expandTableOrders={expandTableOrders} setExpandTableOrders={setExpandTableOrders} setPath={setPath} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} clickedOnDelivered={clickedOnDelivered} setClickedOnDelivered={setClickedOnDelivered} tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} enumerateOrders={enumerateOrders} getRelevantOrders={getRelevantOrders} categoryActive={categoryActive} setCategoryActive={setCategoryActive} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} menuSearch={menuSearch} setMenuSearch={setMenuSearch} logTables={logTables} setLogTables={setLogTables} tempTables={tempTables} clickedTable={clickedTable} setTempTables={setTempTables}/> : path.includes('customize') ?\r\n                        <CustomizeMenu setClickMenuItem={setClickMenuItem} clickMenuItem={clickMenuItem} tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} setSelectedCategory={setSelectedCategory} selectedCategory={selectedCategory} menuSearch={menuSearch} clickedTable={clickedTable} tempTables={tempTables} setMenuSearch={setMenuSearch} categoryActive={categoryActive} setCategoryActive={setCategoryActive} setTempTables={setTempTables} addNewItemtoMenu={addNewItemtoMenu} setAddNewItemtoMenu={setAddNewItemtoMenu} menuInput={menuInput} setMenuInput={setMenuInput} /> : path === 'Statistics' ?\r\n                        <Statistics clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders} logTables={logTables}/> : path === 'kitchen' ?\r\n                        <KitchenStuff clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders}/> :\r\n                        <Waiters clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}