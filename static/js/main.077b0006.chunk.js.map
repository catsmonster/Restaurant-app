{"version":3,"sources":["components/Navigation/Navigation.js","components/DeleteBtn/DeleteBtn.js","components/Table/Table.js","components/Tables/Tables.js","components/RemoveMenu/RemoveMenu.js","components/Scroll.js","components/Menu/Menu.js","components/CategoryItem/CategoryItem.js","components/SearchMenu/SearchMenu.js","components/Menu/CategoriesWithMenu.js","components/ReturnDelivered/ReturnDelivered.js","components/ReturnPrepared/ReturnPrepared.js","components/SpecialOrders/SpecialOrders.js","components/Orders/Orders.js","components/ToDoMenu/ToDoMenu.js","components/Statistics/Statistics.js","components/CustomizeMenu/CustomizeMenu.js","components/KitchenStuff/KitchenStuff.js","components/Waiters/Waiters.js","containers/App.js","serviceWorker.js","index.js"],"names":["Navigation","setPath","resetWhenChangingPath","setNavActive","navActive","openNav","setOpenNav","tempTables","burgerKing","className","onClick","waitingOrders","i","length","orders","filter","order","status","preparedOrders","DeleteBtn","setTempTables","id","setClickCount","clickCount","updatedTempTables","item","Table","setClickedTable","tableActive","Tables","path","clickedTable","tablesArray","map","user","key","total","timeAdded","Date","RemoveMenu","name","onRemoveOrderedItem","Scroll","props","style","overflowY","maxHeight","margin","children","Menu","price","onClickMenu","clickMenuItem","setClickMenuItem","tempMenu","onChangeClickMenuItem","source","updatedClickMenuItem","toggle","indexOfSelectedItem","findIndex","initialMenu","includes","active","CategoryItem","onClickCategory","categoryActive","setCategoryActive","SearchMenu","setMenuSearch","onChange","e","target","value","CategoriesWithMenu","setSelectedCategory","menuSearch","selectedCategory","setTempMenu","push","time","table","comments","commentInput","prompt","priceInput","isNaN","Number","updateTempMenu","alert","inputName","toLowerCase","category","inputPrice","inputCategory","menuItemsToShow","menuOfSelectedCategoryActive","menuArrayActive","menuOfSelectedCategoryHidden","menuArrayHidden","allCategoriesActive","allCategoriesHidden","uniqueCategoriesActive","Set","uniqueCategoriesHidden","categoriesArray","hiddenCategoriesArray","ReturnDelivered","ReturnPrepared","SpecialOrders","comment","clickSpecialItem","setClickSpecialItem","onRemoveSpecialItem","initialState","commentsString","join","Orders","logTables","setLogTables","getRelevantOrders","enumerateOrders","numWaitingOrders","numPreparedOrders","numDeliveredOrders","activeOrders","concat","specialWaitingOrders","specialPreparedOrders","specialDeliveredOrders","arrCount","prepArrCount","orderedItemsArr","indexOfOrderedItem","splice","priceOfSelectedItem","activeTempMenu","decrementPriceFromTable","getTime","selectedMenuArr","deliveredOrders","deliveredOrdersArr","preparedOrdersArr","waitingSpecialOrdersArr","preparedSpecialOrdersArr","deliveredSpecialOrdersArr","clearTable","updatedTempTable","logTotal","totalWithTip","returnedItems","updatedLogTables","onExpand","tip","tipChange","tipChangeTen","ToDoMenu","onSetDone","Statistics","logOrdersArray","flat","Infinity","parseFloat","toFixed","CustomizeMenu","menuInput","setMenuInput","addNewItemtoMenu","setAddNewItemtoMenu","type","updatedInput","Math","abs","existingItems","lastKnownId","updateMenu","KitchenStuff","waitingArray","Waiters","deliveredArray","deliveredMenuArr","App","useState","waiting","prepared","delivered","clickedOnDelivered","setClickedOnDelivered","special","tempWaitingOrders","normalOrders","customOrders","sort","a","b","ordersDetailsArray","updateTempTables","indexOfSelectedOrder","relevantOrders","orderNamesArr","count","forEach","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.077b0006.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({setPath, resetWhenChangingPath, setNavActive, navActive, openNav, setOpenNav, tempTables}) => {\r\n\r\n    const addClass = () => {\r\n        if (openNav) {\r\n            return 'change';\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    const burgerKing = (\r\n        <div className='burgerPosition'>\r\n            <div className={`burgerContainer ${addClass()}`} onClick={()=> {\r\n                setOpenNav(!openNav);\r\n            }}>\r\n                <div className={`bar1`}></div>\r\n                <div className={`bar2`}></div>\r\n                <div className={`bar3`}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    let waitingOrders = 0;\r\n    for (let i=0; i<tempTables.length; i++) {\r\n        waitingOrders += tempTables[i].orders.filter((order)=> order.status === 'waiting').length;\r\n    }\r\n\r\n    let preparedOrders = 0;\r\n    for (let i=0; i<tempTables.length; i++) {\r\n        preparedOrders += tempTables[i].orders.filter((order)=> order.status === 'prepared').length;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {openNav ?\r\n            <div>\r\n                <div>\r\n                    {burgerKing}\r\n                </div>\r\n                <ul className='NavUl'>\r\n                    <li className={`NavLi ${navActive===0 ? 'navActive' : ''}`} onClick={()=> {setPath('tables'); resetWhenChangingPath(); setNavActive(0);}}>Tables</li>\r\n                    <li className={`NavLi ${navActive===1 ? 'navActive' : ''}`} onClick={()=> {setPath('kitchen'); resetWhenChangingPath(); setNavActive(1);}}>{`Kitchen Stuff ${waitingOrders}`}</li>\r\n                    <li className={`NavLi ${navActive===2 ? 'navActive' : ''}`} onClick={()=> {setPath('waiters'); resetWhenChangingPath(); setNavActive(2);}}>{`Waiters ${preparedOrders}`}</li>\r\n                    <li className={`NavLi ${navActive===3 ? 'navActive' : ''}`} onClick={()=> {setPath('customize'); resetWhenChangingPath(); setNavActive(3);}}>Customize menu</li>\r\n                    <li className={`NavLi ${navActive===4 ? 'navActive' : ''}`} onClick={()=> {setPath('Statistics'); resetWhenChangingPath(); setNavActive(4);}}>Management</li>\r\n                </ul>\r\n            </div> :\r\n              <div>\r\n                  {burgerKing}\r\n              </div>\r\n            }\r\n        </div>\r\n        );\r\n\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst DeleteBtn = ({tempTables, setTempTables, id, setClickCount, clickCount}) => {\r\n    return (\r\n        <div className='deleteBtnContainer'>\r\n        <button className='deleteBtn' onClick={()=> {\r\n            const updatedTempTables = tempTables.filter((item) => item.id !== id);\r\n            for (let i=0; i<updatedTempTables.length; i++) {\r\n                updatedTempTables[i].id = i;\r\n            }\r\n            setTempTables(updatedTempTables);\r\n            setClickCount(clickCount - 1);\r\n        }}></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteBtn;","import React from 'react';\r\nimport './Table.css'\r\nimport DeleteBtn from \"../DeleteBtn/DeleteBtn\";\r\n\r\nconst Table = ({id, setPath, setClickedTable, setTempTables, tempTables, setClickCount, clickCount}) => {\r\n\r\n    const setActiveTable = () => {\r\n        if (tempTables[id].tableActive === 'false') {\r\n            return 'tableDiv'\r\n        } else if (tempTables[id].tableActive === 'waiting') {\r\n            return 'activeTableDiv'\r\n        } else {\r\n            return 'eatingTableDiv'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={setActiveTable()} id={id}>\r\n            <DeleteBtn id={id} setTempTables={setTempTables} tempTables={tempTables} setClickCount={setClickCount} clickCount={clickCount}/>\r\n            <p className='clickTable' onClick={()=> {\r\n                setClickedTable(id);\r\n                setPath(`order_${id}`)}\r\n\r\n            }>{`Click here to view and edit table number ${id + 1}`}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport './Tables.css';\r\nimport Table from \"../Table/Table\";\r\n\r\nconst Tables = ({tempTables, path, setPath, setTempTables, clickCount, setClickCount, setClickedTable, clickedTable}) => {\r\n\r\n    const tablesArray = tempTables.map((user, i) => <Table setClickCount={setClickCount} clickCount={clickCount} setClickedTable={setClickedTable} setPath={setPath} key={tempTables[i].id} id={tempTables[i].id} tempTables={tempTables} setTempTables={setTempTables} clickedTable={clickedTable} /> );\r\n\r\n    return (\r\n        <div>\r\n            <div className='container'>\r\n                {tablesArray}\r\n            </div>\r\n            <button className={'addTable'} onClick={()=> {\r\n                setClickCount(clickCount + 1);\r\n                setTempTables([...tempTables, {\r\n                    id: clickCount,\r\n                    orders: [],\r\n                    total: 0,\r\n                    tableActive: 'false',\r\n                    timeAdded: new Date()\r\n                }])\r\n\r\n            }\r\n            }>\r\n                Add a new table\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tables;","import React from 'react';\r\n\r\nconst RemoveMenu = ({name, onRemoveOrderedItem}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n\r\n        }}>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'waiting')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RemoveMenu;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"menuList\" style={{ overflowY: 'scroll', maxHeight: '250px', margin: '1%' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './Menu.css';\r\n\r\nconst Menu = ({id, name, price, onClickMenu, clickMenuItem, setClickMenuItem, path, tempMenu}) => {\r\n\r\n    const onChangeClickMenuItem = (source) => {\r\n        const updatedClickMenuItem = {...clickMenuItem};\r\n        if (source === 'clickMenu' && !updatedClickMenuItem.toggle) {\r\n            updatedClickMenuItem.status = id;\r\n            updatedClickMenuItem.toggle = true;\r\n        } else {\r\n            updatedClickMenuItem.status = 'false';\r\n            updatedClickMenuItem.toggle = false;\r\n            onClickMenu({name, price, source, id});\r\n        }\r\n        setClickMenuItem(updatedClickMenuItem);\r\n    };\r\n\r\n    const indexOfSelectedItem = tempMenu.findIndex((item) => item.id === id);\r\n\r\n    const initialMenu =\r\n        (\r\n            <div className='menuContainer'>\r\n                {clickMenuItem.toggle === true && clickMenuItem.status === id ?\r\n                <button onClick={()=> {\r\n                    onChangeClickMenuItem('clickMenu')\r\n                }}>&#8911;</button> :\r\n                <button onClick={()=> {\r\n                    onChangeClickMenuItem('clickMenu')\r\n                }}>&#8910;</button>\r\n                }\r\n                <span className='menuItem'>\r\n                    {name}\r\n                </span>\r\n                <span className='menuItem'>\r\n                    {price}\r\n                </span>\r\n                {path.includes('order_') ?\r\n                    <button onClick={() => onChangeClickMenuItem('add')}>&oplus;</button> : null\r\n                }\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {clickMenuItem.status === id && path.includes('order_') ?\r\n                <div>\r\n                    {initialMenu}\r\n                    <button onClick={()=> onChangeClickMenuItem('addCustom')}>Add with a custom price</button>\r\n                    <button onClick={()=> onChangeClickMenuItem('addComment')}>Add with a comment</button>\r\n                    <button onClick={()=> onChangeClickMenuItem('addCustomComment')}>Add with a custom price and a comment</button>\r\n                </div> : clickMenuItem.status === id && path.includes('custom') ?\r\n                <div>\r\n                    {initialMenu}\r\n                    {tempMenu[indexOfSelectedItem].active === false ?\r\n                    <button onClick={() => onChangeClickMenuItem('recover')}>Recover dish</button> :\r\n                    <div>\r\n                        <button onClick={() => onChangeClickMenuItem('Remove')}>Remove dish</button>\r\n                        <button onClick={()=> onChangeClickMenuItem('updateName')}>Update dish name</button>\r\n                        <button onClick={()=> onChangeClickMenuItem('updatePrice')}>Update dish price</button>\r\n                        <button onClick={()=> onChangeClickMenuItem('updateCategory')}>Update dish category</button>\r\n                    </div>\r\n                    }\r\n                </div> :\r\n                <div>\r\n                    {initialMenu}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst CategoryItem = ({name, onClickCategory, categoryActive, setCategoryActive, id}) => {\r\n    return (\r\n      <div className={`menuContainer`} id={id===categoryActive ? 'categoryActive' : ''} onClick={() => {\r\n          onClickCategory({name});\r\n          setCategoryActive(id);\r\n      }}>\r\n          <span className='menuItem'>\r\n              {name}\r\n          </span>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default CategoryItem;","import React from 'react';\r\n\r\nconst SearchMenu = ({setMenuSearch}) => {\r\n  return (\r\n    <div>\r\n        <input className=\"searchBox\" onChange={(e) => setMenuSearch(e.target.value)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchMenu;","import React from 'react';\r\nimport Menu from \"./Menu\";\r\nimport CategoryItem from \"../CategoryItem/CategoryItem\";\r\nimport Scroll from \"../Scroll\";\r\nimport SearchMenu from \"../SearchMenu/SearchMenu\";\r\n\r\nconst CategoriesWithMenu = ({tempTables, clickedTable, setTempTables, path, setSelectedCategory, setMenuSearch, menuSearch, selectedCategory, categoryActive, setCategoryActive, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem}) => {\r\n    const onClickMenu = ({name, price, source, id}) => {\r\n        if (path.includes('order_')) {\r\n            const updatedTempTables = [...tempTables];\r\n            if (source === 'add') {\r\n                updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [], price: price});\r\n                updatedTempTables[clickedTable].total += price;\r\n            } else if (source === 'addComment') {\r\n                const commentInput = prompt('Enter your custom comment:');\r\n                if (commentInput) {\r\n                    updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [commentInput], price: price});\r\n                    updatedTempTables[clickedTable].total += price;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else if (source === 'addCustom') {\r\n                const priceInput = prompt('Enter your custom price:');\r\n                if (priceInput && !isNaN(Number(priceInput))) {\r\n                    updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [`custom price ${priceInput}`], price: priceInput});\r\n                    updatedTempTables[clickedTable].total += Number(priceInput);\r\n                } else {\r\n                    return;\r\n                }\r\n            } else if (source === 'addCustomComment') {\r\n                const priceInput = prompt('Enter your custom price:');\r\n                if (priceInput && !isNaN(Number(priceInput))) {\r\n                    const commentInput = prompt('Enter your custom comment:');\r\n                    if (commentInput) {\r\n                        updatedTempTables[clickedTable].orders.push({name: name, status: 'waiting', time: new Date(), table: clickedTable, comments: [`custom price ${priceInput}`, commentInput], price: priceInput});\r\n                        updatedTempTables[clickedTable].total += Number(priceInput);\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            updatedTempTables[clickedTable].tableActive = 'waiting';\r\n            setTempTables(updatedTempTables);\r\n        } else {\r\n            const indexOfSelectedItem = tempMenu.findIndex((item) => item.id === id);\r\n            const updateTempMenu = [...tempMenu];\r\n            if (source === 'Remove') {\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n            } else if (source === 'recover') {\r\n                if (updateTempMenu.filter((item) => item.active === true && item.name === name).length > 0) {\r\n                    alert('Unable to recover a dish with the same name as another active dish.')\r\n                } else {\r\n                    updateTempMenu[indexOfSelectedItem].active = true;\r\n                }\r\n            } else if (source === 'updateName') {\r\n                let inputName = '';\r\n                inputName = prompt('Please provide a new name for the dish');\r\n                if (inputName) {\r\n                    if (inputName.length > 0) {\r\n                        while (tempMenu.filter((item) => item.name.toLowerCase() === inputName.toLowerCase()).length > 0) {\r\n                            inputName = prompt('Given name already exists, please provide a unique new name');\r\n                            if (inputName) {\r\n                                if (inputName.length > 0) {\r\n                                    inputName.toLowerCase();\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n                updateTempMenu.push({\r\n                    id: updateTempMenu.length + 1,\r\n                    name: inputName,\r\n                    price: updateTempMenu[indexOfSelectedItem].price,\r\n                    category: updateTempMenu[indexOfSelectedItem].category,\r\n                    active: true\r\n                });\r\n            } else if (source === 'updatePrice') {\r\n                let inputPrice = null;\r\n                inputPrice = Number(prompt('Please provide a new price for the dish'));\r\n                if (inputPrice) {\r\n                    while (isNaN(inputPrice) || inputPrice === 0) {\r\n                        inputPrice = Number(prompt('Please provide a valid price for the dish'));\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n                updateTempMenu[indexOfSelectedItem].active = false;\r\n                updateTempMenu.push({\r\n                    id: updateTempMenu.length + 1,\r\n                    name: updateTempMenu[indexOfSelectedItem].name,\r\n                    price: inputPrice,\r\n                    category: updateTempMenu[indexOfSelectedItem].category,\r\n                    active: true\r\n                });\r\n            } else if (source === 'updateCategory') {\r\n                let inputCategory = prompt('Please provide a category name');\r\n                if (inputCategory) {\r\n                    if (inputCategory.length > 0) {\r\n                        updateTempMenu[indexOfSelectedItem].category = inputCategory.toLowerCase();\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            setTempMenu(updateTempMenu);\r\n        }\r\n\r\n    };\r\n\r\n    const onClickCategory = ({name}) => {\r\n        setSelectedCategory(name);\r\n        setMenuSearch('');\r\n    };\r\n    const menuItemsToShow = (status) => {\r\n        const activeMenuItems = tempMenu.filter((item) => item.active === status);\r\n        const menuOfSelectedCategory = activeMenuItems.filter((item) => {\r\n            if (selectedCategory === 'All' && !menuSearch.length > 0) {\r\n                return item;\r\n            } else if (menuSearch.length > 0) {\r\n                return item.name.toLowerCase().includes(menuSearch.toLowerCase());\r\n            }\r\n            return item.category === selectedCategory;\r\n        });\r\n        return menuOfSelectedCategory;\r\n    };\r\n\r\n    const menuOfSelectedCategoryActive = menuItemsToShow(true);\r\n\r\n    const menuArrayActive = menuOfSelectedCategoryActive.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryActive[i].id} id={menuOfSelectedCategoryActive[i].id} name={menuOfSelectedCategoryActive[i].name} price={menuOfSelectedCategoryActive[i].price} onClickMenu={onClickMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} path={path} tempMenu={tempMenu}/>\r\n    });\r\n\r\n    const menuOfSelectedCategoryHidden = menuItemsToShow(false);\r\n\r\n    const menuArrayHidden = menuOfSelectedCategoryHidden.map((item, i) => {\r\n        return <Menu key={menuOfSelectedCategoryHidden[i].id} id={menuOfSelectedCategoryHidden[i].id} name={menuOfSelectedCategoryHidden[i].name} price={menuOfSelectedCategoryHidden[i].price} onClickMenu={onClickMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} path={path} tempMenu={tempMenu}/>\r\n    });\r\n\r\n    let allCategoriesActive = ['All'];\r\n    let allCategoriesHidden = ['All'];\r\n    for (let i=0; i<tempMenu.length; i++) {\r\n        if (tempMenu[i].active === true) {\r\n            allCategoriesActive.push(tempMenu[i].category)\r\n        } else {\r\n            allCategoriesHidden.push(tempMenu[i].category)\r\n        }\r\n    }\r\n    const uniqueCategoriesActive = [...new Set(allCategoriesActive)];\r\n\r\n    const uniqueCategoriesHidden = [...new Set(allCategoriesHidden)];\r\n\r\n    const categoriesArray = uniqueCategoriesActive.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n    const hiddenCategoriesArray = uniqueCategoriesHidden.map((item, i) => {\r\n        return <CategoryItem categoryActive={categoryActive} setCategoryActive={setCategoryActive} onClickCategory={onClickCategory} key={i} id={i} name={item}/>\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='menuArray'>\r\n                <Scroll>\r\n                    {categoriesArray}\r\n                </Scroll>\r\n                <Scroll>\r\n                    {menuArrayActive}\r\n                </Scroll>\r\n            </div>\r\n            {path === 'customize' && hiddenCategoriesArray.length > 1 ?\r\n            <div>\r\n                <h3>Click a menu item to bring it back from the trash</h3>\r\n                <div className='menuArray'>\r\n                    <Scroll>\r\n                        {hiddenCategoriesArray}\r\n                    </Scroll>\r\n                    <Scroll>\r\n                        {menuArrayHidden}\r\n                    </Scroll>\r\n                </div>\r\n            </div>: <span></span>\r\n                }\r\n            <div className='searchContainer'>\r\n                <span id='searchText'>Search menu item:</span>\r\n                <SearchMenu setMenuSearch={setMenuSearch}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoriesWithMenu;","import React from 'react';\r\n\r\nconst ReturnDelivered = ({name, onRemoveOrderedItem}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n\r\n        }}>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'delivered')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnDelivered;","import React from 'react';\r\n\r\nconst ReturnPrepared = ({name, onRemoveOrderedItem}) => {\r\n    return (\r\n        <div onClick={()=> {\r\n\r\n        }}>\r\n            {name[1]<2 ?\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'prepared')}></button>\r\n                    <span>{`${name[1]} plate of ${name[0]}`}</span>\r\n                </div> :\r\n                <div className='foodContainer'>\r\n                    <button className='deleteBtn' onClick={()=> onRemoveOrderedItem({name}, 'prepared')}></button>\r\n                    <span>{`${name[1]} plates of ${name[0]}`}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnPrepared;","import React from 'react';\r\n\r\nconst SpecialOrders = ({name, comment, time, status, price, clickSpecialItem, setClickSpecialItem, onRemoveSpecialItem}) => {\r\n\r\n\r\n    const initialState = (\r\n        <div>\r\n            <button className='deleteBtn' onClick={()=> onRemoveSpecialItem({time, status, price})}></button>\r\n            <span>{name}</span>\r\n            {clickSpecialItem === time ?\r\n                <button onClick={() => setClickSpecialItem('false')}>Hide info</button> :\r\n                <button onClick={() => setClickSpecialItem(time)}>More info</button>\r\n            }\r\n        </div>\r\n    );\r\n\r\n    const commentsString = comment.join(', ');\r\n\r\n    return (\r\n        <div className='foodContainer'>\r\n            {clickSpecialItem === time ?\r\n                <div>\r\n                    {initialState}\r\n                    <p>{commentsString}</p>\r\n                </div> :\r\n                <div>\r\n                    {initialState}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpecialOrders;","import React, {useEffect} from 'react';\r\nimport './Orders.css'\r\nimport RemoveMenu from \"../RemoveMenu/RemoveMenu\";\r\nimport Scroll from \"../Scroll\";\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\nimport ReturnDelivered from \"../ReturnDelivered/ReturnDelivered\";\r\nimport ReturnPrepared from \"../ReturnPrepared/ReturnPrepared\";\r\nimport SpecialOrders from \"../SpecialOrders/SpecialOrders\";\r\n\r\nconst Orders = ({path, tempTables, clickedTable, setTempTables, logTables, setLogTables, setMenuSearch, menuSearch, selectedCategory, setSelectedCategory, categoryActive, setCategoryActive, getRelevantOrders, enumerateOrders, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem, clickSpecialItem, setClickSpecialItem, setPath}) => {\r\n\r\n    let numWaitingOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'waiting').length;\r\n    let numPreparedOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'prepared').length;\r\n    let numDeliveredOrders = tempTables[clickedTable].orders.filter((order) => order.status === 'delivered').length;\r\n\r\n    const waitingOrders = getRelevantOrders('waiting', false);\r\n    const preparedOrders = getRelevantOrders('prepared', false);\r\n    const activeOrders = waitingOrders.concat(preparedOrders);\r\n\r\n    const specialWaitingOrders = getRelevantOrders('waiting', true);\r\n    const specialPreparedOrders = getRelevantOrders('prepared', true);\r\n    const specialDeliveredOrders = getRelevantOrders('delivered', true);\r\n\r\n\r\n    const arrCount = enumerateOrders(waitingOrders);\r\n    const prepArrCount = enumerateOrders(preparedOrders);\r\n\r\n    const onRemoveOrderedItem = ({name}, status) => {\r\n        const updatedTempTables = [...tempTables];\r\n        const orderedItemsArr = updatedTempTables[clickedTable].orders;\r\n        let indexOfOrderedItem = 0;\r\n        if (status === 'waiting') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'waiting') && (item.comments.length === 0));\r\n            updatedTempTables[clickedTable].orders.splice(indexOfOrderedItem, 1);\r\n        } else if (status === 'delivered') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'delivered') && (item.comments.length === 0));\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        } else {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.name === name[0] && (item.status === 'prepared') && (item.comments.length === 0));\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        }\r\n        let priceOfSelectedItem = 0;\r\n        const activeTempMenu = tempMenu.filter((item) => item.active === true);\r\n        for (let i=0; i<activeTempMenu.length; i++)\r\n            if (activeTempMenu[i].name === name[0]) {\r\n                priceOfSelectedItem = activeTempMenu[i].price;\r\n            }\r\n        decrementPriceFromTable(priceOfSelectedItem);\r\n        setTempTables(updatedTempTables);\r\n    };\r\n\r\n    const onRemoveSpecialItem = ({time, status, price}) => {\r\n        const updatedTempTables = [...tempTables];\r\n        const orderedItemsArr = updatedTempTables[clickedTable].orders;\r\n        let indexOfOrderedItem = 0;\r\n        if (status === 'waiting') {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.time.getTime() === time);\r\n            updatedTempTables[clickedTable].orders.splice(indexOfOrderedItem, 1);\r\n        } else {\r\n            indexOfOrderedItem = orderedItemsArr.findIndex((item) => item.time.getTime() === time);\r\n            updatedTempTables[clickedTable].orders[indexOfOrderedItem].status = 'returned';\r\n        }\r\n        decrementPriceFromTable(price);\r\n        setTempTables(updatedTempTables);\r\n\r\n    };\r\n\r\n    const decrementPriceFromTable = (price) => {\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total -= price;\r\n        if (updatedTempTables[clickedTable].total === 0 && updatedTempTables[clickedTable].orders.length === 0) {\r\n            updatedTempTables[clickedTable].tableActive = 'false';\r\n            updatedTempTables[clickedTable].timeAdded = new Date();\r\n        }\r\n        setTempTables(updatedTempTables);\r\n    };\r\n\r\n    const selectedMenuArr = arrCount.map((item, i)=> {\r\n        return <RemoveMenu key={i} id={i} name={arrCount[i]} onRemoveOrderedItem={onRemoveOrderedItem} />\r\n    });\r\n\r\n    const tempDeliveredOrders = getRelevantOrders('delivered', false);\r\n    const deliveredOrders = enumerateOrders(tempDeliveredOrders);\r\n\r\n    const deliveredOrdersArr = deliveredOrders.map((item, i)=> {\r\n        return <ReturnDelivered key={i} id={i} name={deliveredOrders[i]} onRemoveOrderedItem={onRemoveOrderedItem} />\r\n    });\r\n\r\n    const preparedOrdersArr = prepArrCount.map((item, i)=> {\r\n        return <ReturnPrepared key={i} id={i} name={prepArrCount[i]} onRemoveOrderedItem={onRemoveOrderedItem} />\r\n    });\r\n\r\n    const waitingSpecialOrdersArr = specialWaitingOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialWaitingOrders[i][0]} time={specialWaitingOrders[i][2]} status={specialWaitingOrders[i][3]} comment={specialWaitingOrders[i][4]} price={specialWaitingOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n    const preparedSpecialOrdersArr = specialPreparedOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialPreparedOrders[i][0]} time={specialPreparedOrders[i][2]} status={specialPreparedOrders[i][3]} comment={specialPreparedOrders[i][4]} price={specialPreparedOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n    const deliveredSpecialOrdersArr = specialDeliveredOrders.map((item, i)=> {\r\n        return <SpecialOrders key={i} id={i} name={specialDeliveredOrders[i][0]} time={specialDeliveredOrders[i][2]} status={specialDeliveredOrders[i][3]} comment={specialDeliveredOrders[i][4]} price={specialDeliveredOrders[i][5]} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onRemoveSpecialItem={onRemoveSpecialItem}/>\r\n    });\r\n\r\n\r\n    const clearTable = () => {\r\n        const updatedTempTable = [...tempTables];\r\n        updatedTempTable[clickedTable] = {id: clickedTable, orders: [], total: 0, tableActive: 'false', timeAdded: new Date()};\r\n        setTempTables(updatedTempTable);\r\n    };\r\n\r\n    const logTotal = () => {\r\n        const totalWithTip = tempTables[clickedTable].total;\r\n        const returnedItems = tempTables[clickedTable].orders.filter((order)=> order.status === 'returned');\r\n        const updatedLogTables = {...logTables};\r\n        updatedLogTables.total = logTables.total + totalWithTip;\r\n        updatedLogTables.orders.push(returnedItems);\r\n        setLogTables(updatedLogTables);\r\n    };\r\n\r\n    const tipChange = () => {\r\n        let tip = Number(prompt('Is there a tip?', '0'));\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total += tip;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    const tipChangeTen = () => {\r\n        const updatedTempTables = [...tempTables];\r\n        updatedTempTables[clickedTable].total *= 1.1;\r\n        setTempTables(updatedTempTables);\r\n        logTotal();\r\n        clearTable();\r\n    };\r\n\r\n    const onExpand = (source) => {\r\n      const updatedClickMenuItem = {...clickMenuItem};\r\n        if ((source === 'waitingOrders' || source === 'preparedOrders' || source === 'deliveredOrders') && !updatedClickMenuItem.toggle) {\r\n            updatedClickMenuItem.status = source;\r\n            updatedClickMenuItem.toggle = true;\r\n        } else {\r\n            updatedClickMenuItem.status = 'false';\r\n            updatedClickMenuItem.toggle = false;\r\n        }\r\n        setClickMenuItem(updatedClickMenuItem);\r\n    };\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <button onClick={()=> setPath('tables')}>Go back</button>\r\n            <h1>This is da menu!</h1>\r\n            <CategoriesWithMenu clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu}/>\r\n            <h1>{`Table ${tempTables[clickedTable].id + 1} ordered the following items:`}</h1>\r\n            <div className='menuArrayContainer'>\r\n                <div className='selectedMenu'>\r\n                    <h3>{`Waiting orders: ${numWaitingOrders}`}</h3>\r\n                    {clickMenuItem.status === 'waitingOrders' && clickMenuItem.toggle === true ?\r\n                        <div>\r\n                            <button onClick={()=> onExpand('waitingOrders')}>&#8911;</button>\r\n                            <Scroll>\r\n                                {selectedMenuArr}\r\n                                {waitingSpecialOrdersArr}\r\n                            </Scroll>\r\n                        </div> :\r\n                            <button onClick={()=> onExpand('waitingOrders')}>&#8910;</button>\r\n                    }\r\n                </div>\r\n                <div className='selectedMenu'>\r\n                    <h3>{`Ready for delivery: ${numPreparedOrders}`}</h3>\r\n                    {clickMenuItem.status === 'preparedOrders' && clickMenuItem.toggle === true ?\r\n                        <div>\r\n                            <button onClick={() => onExpand('preparedOrders')}>&#8911;</button>\r\n                            <Scroll>\r\n                                {preparedOrdersArr}\r\n                                {preparedSpecialOrdersArr}\r\n                            </Scroll>\r\n                        </div> : <button onClick={()=> onExpand('preparedOrders')}>&#8910;</button>\r\n\r\n                    }\r\n                </div>\r\n                <div className='selectedMenu'>\r\n                    <h3>{`Orders delivered: ${numDeliveredOrders}`}</h3>\r\n                    {clickMenuItem.status === 'deliveredOrders' && clickMenuItem.toggle === true ?\r\n                        <div>\r\n                            <button onClick={() => onExpand('deliveredOrders')}>&#8911;</button>\r\n                            <Scroll>\r\n                                {deliveredOrdersArr}\r\n                                {deliveredSpecialOrdersArr}\r\n                            </Scroll>\r\n                        </div> :\r\n                        <button onClick={() => onExpand('deliveredOrders')}>&#8910;</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <p>{`For a total of ${tempTables[clickedTable].total}`}</p>\r\n            <button className='addTable' onClick={()=> {\r\n                if (activeOrders.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChange()\r\n                }\r\n            }}>Checkout and add a custom tip</button>\r\n            <button className='addTable' onClick={()=> {\r\n                if (activeOrders.length > 0) {\r\n                    alert('Table has not yet received all orders!')\r\n                } else {\r\n                    tipChangeTen()\r\n                }\r\n            }}>Checkout and add 10% tip</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;","import React from 'react';\r\nimport './ToDoMenu.css'\r\n\r\nconst ToDoMenu = ({name, onSetDone, time, table, status, comment, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const commentsString = comment.join(', ');\r\n\r\n    const initialState = (\r\n        <div>\r\n            {commentsString.length > 0 && clickSpecialItem === 'false' ?\r\n            <div>\r\n                <span>\r\n                    {`Order ${name} of table ${table + 1}`}\r\n                </span>\r\n                <button onClick={()=> setClickSpecialItem(time)}>More info</button>\r\n            </div> : commentsString.length > 0 && clickSpecialItem === time ?\r\n            <div>\r\n                <span>\r\n                    {`Order ${name} of table ${table + 1}`}\r\n                </span>\r\n                <button onClick={()=> setClickSpecialItem('false')}>Less info</button>\r\n                <span>{commentsString}</span>\r\n            </div> :\r\n            <span>\r\n                {`Order ${name} of table ${table + 1}`}\r\n            </span>\r\n            }\r\n            {status === 'waiting' ?\r\n                <button className='addTable' onClick={() => onSetDone({time, table, status})}>Prepared</button> : status === 'prepared' ?\r\n                    <button className='addTable' onClick={() => onSetDone({time, table, status})}>Delivered</button> :\r\n                    null\r\n            }\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className='todoList'>\r\n            {initialState}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoMenu;","import React from 'react';\r\nimport './Statistics.css'\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst Statistics = ({logTables, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const logOrdersArray = logTables.orders.flat(Infinity);\r\n\r\n    const returnedItems = logOrdersArray.map((order, i) => {\r\n        return <ToDoMenu key={i} id={i} name={logOrdersArray[i].name} table={logOrdersArray[i].table} time={logOrdersArray[i].time.getTime()}\r\n                         status={logOrdersArray[i].status} comment={logOrdersArray[i].comments} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} />\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n                <h2>Income:</h2>\r\n                <span>{`The total revenue from all checked out tables is ${parseFloat(logTables.total).toFixed(2)}`}</span>\r\n                <div>\r\n                    <h3>The following orders were returned:</h3>\r\n                    <Scroll>\r\n                        {returnedItems}\r\n                    </Scroll>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport './CustomizeMenu.css'\r\nimport CategoriesWithMenu from \"../Menu/CategoriesWithMenu\";\r\n\r\nconst CustomizeMenu = ({menuInput, setMenuInput, addNewItemtoMenu, setAddNewItemtoMenu, setTempTables, setCategoryActive, categoryActive, setMenuSearch, tempTables, path, clickedTable, menuSearch, selectedCategory, setSelectedCategory, tempMenu, setTempMenu, clickMenuItem, setClickMenuItem}) => {\r\n    const updateMenu = () => {\r\n        let existingItems = [];\r\n        for (let i=0; i<tempMenu.length; i++) {\r\n            existingItems.push(tempMenu[i].name.toLowerCase());\r\n        }\r\n        let lastKnownId = tempMenu[tempMenu.length - 1].id;\r\n        if (menuInput.name.length > 0 && !isNaN(Number(menuInput.price)) && menuInput.category.length > 0) {\r\n            if (existingItems.includes(menuInput.name.toLowerCase())) {\r\n                return alert(`The dish ${menuInput.name} already exists, please enter a unique dish name`);\r\n            }\r\n            tempMenu.push({id: lastKnownId + 1, name: menuInput.name, price: menuInput.price, category: menuInput.category, active: true});\r\n            setAddNewItemtoMenu(false);\r\n        } else {\r\n            alert(\"Please enter correct dish details.\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <h2>Here you will be able to customize your menu</h2>\r\n            {addNewItemtoMenu ?\r\n            <div className='addDish'>\r\n                <span>Please enter dish name:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.name = e.target.value;\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter dish price:</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.price = Math.abs(Number(e.target.value));\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <span>Please enter a category</span>\r\n                <input type=\"text\" onChange={(e) => {\r\n                    let updatedInput = {...menuInput};\r\n                    updatedInput.category = e.target.value.toLowerCase();\r\n                    setMenuInput(updatedInput);\r\n                }}/>\r\n                <button className='addTable' onClick={()=> updateMenu()}>Add dish</button>\r\n                <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} setTempMenu={setTempMenu} tempMenu={tempMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem}/>\r\n            </div> :\r\n                <div>\r\n                    <h3>Click a menu item to remove it from the menu - This will not affect history</h3>\r\n                    <CategoriesWithMenu setTempTables={setTempTables} setCategoryActive={setCategoryActive} categoryActive={categoryActive} setMenuSearch={setMenuSearch} tempTables={tempTables} path={path} clickedTable={clickedTable} menuSearch={menuSearch} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} tempMenu={tempMenu} setTempMenu={setTempMenu} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem}/>\r\n                    <button className='addTable' onClick={() => setAddNewItemtoMenu(true)}>Add a new menu item</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomizeMenu;","import React from 'react';\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst KitchenStuff = ({getRelevantOrders, onSetDone, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const waitingArray = getRelevantOrders('waiting');\r\n\r\n    const selectedMenuArr = waitingArray.map((item, i) => {\r\n        return <ToDoMenu key={i} id={i} name={waitingArray[i][0]} table={waitingArray[i][1]} time={waitingArray[i][2]}\r\n                         status={waitingArray[i][3]} comment={waitingArray[i][4]} onSetDone={onSetDone} setClickSpecialItem={setClickSpecialItem} clickSpecialItem={clickSpecialItem}/>\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <div className='containerOfContainer'>\r\n                <h3>Waiting list:</h3>\r\n                <Scroll>\r\n                    {selectedMenuArr}\r\n                </Scroll>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KitchenStuff;","import React from 'react';\r\nimport ToDoMenu from \"../ToDoMenu/ToDoMenu\";\r\nimport Scroll from \"../Scroll\";\r\n\r\nconst Waiters = ({getRelevantOrders, onSetDone, clickSpecialItem, setClickSpecialItem}) => {\r\n\r\n    const deliveredArray = getRelevantOrders('prepared');\r\n\r\n    const deliveredMenuArr = deliveredArray.map((item, i)=> {\r\n        return <ToDoMenu key={i} id={i} name={deliveredArray[i][0]} table={deliveredArray[i][1]} time={deliveredArray[i][2]} status={deliveredArray[i][3]} comment={deliveredArray[i][4]} onSetDone={onSetDone} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} />\r\n    });\r\n\r\n    return (\r\n        <div className='statisticsMain'>\r\n            <div className='containerOfContainer'>\r\n                <h3>Ready for delivery:</h3>\r\n                <Scroll>\r\n                    {deliveredMenuArr}\r\n                </Scroll>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Waiters;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport Tables from \"../components/Tables/Tables\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Statistics from \"../components/Statistics/Statistics\";\r\nimport CustomizeMenu from \"../components/CustomizeMenu/CustomizeMenu\";\r\nimport KitchenStuff from \"../components/KitchenStuff/KitchenStuff\";\r\nimport Waiters from \"../components/Waiters/Waiters\";\r\n\r\nfunction App() {\r\n    /*const [tables, setTables] = useState([]);*/\r\n    const [clickCount, setClickCount] = useState(1);\r\n    const [path, setPath] = useState('tables');\r\n    const [clickedTable, setClickedTable] = useState(0);\r\n    const [logTables, setLogTables] = useState({orders: [], total: 0, waiting: 0, prepared: 0, delivered: 0});\r\n    const [menuSearch, setMenuSearch] = useState('');\r\n    const [menuInput, setMenuInput] = useState({name: '', price: 0, category: ''});\r\n    const [addNewItemtoMenu, setAddNewItemtoMenu] = useState(false);\r\n    const [selectedCategory, setSelectedCategory] = useState('All');\r\n    const [categoryActive, setCategoryActive] = useState(0);\r\n    const [navActive, setNavActive] = useState(0);\r\n    const [clickedOnDelivered, setClickedOnDelivered] = useState(false);\r\n    const [clickMenuItem, setClickMenuItem] = useState({status: 'false', toggle: false});\r\n    const [clickSpecialItem, setClickSpecialItem] = useState('false');\r\n    const [openNav, setOpenNav] = useState(false);\r\n    const [tempTables, setTempTables] = useState([{\r\n        id: 0,\r\n        orders: [],\r\n        total: 0,\r\n        tableActive: 'false',\r\n        timeAdded: new Date()\r\n    }]);\r\n    const [tempMenu, setTempMenu] = useState([{\r\n        id: 1,\r\n        name: 'grilled chicken',\r\n        price: 80,\r\n        category: 'main dishes',\r\n        active: true\r\n    },\r\n        {\r\n            id: 2,\r\n            name: 'ceaser salad',\r\n            price: 55,\r\n            category: 'starters',\r\n            active: true\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'beef steak',\r\n            price: 120,\r\n            category: 'main dishes',\r\n            active: true\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'pepperony',\r\n            price: 90,\r\n            category: 'pizzas',\r\n            active: true\r\n        }]);\r\n\r\n\r\n    const resetWhenChangingPath = () => {\r\n        setCategoryActive(0);\r\n        setSelectedCategory('All');\r\n        setMenuSearch('');\r\n        setMenuInput({name: '', price: 0, category: ''});\r\n        setAddNewItemtoMenu(false);\r\n        const updatedClickMenuItem = {...clickMenuItem};\r\n        updatedClickMenuItem.status = 'false';\r\n        setClickMenuItem(updatedClickMenuItem);\r\n        setClickSpecialItem('false');\r\n        setOpenNav(false);\r\n    };\r\n\r\n    const getRelevantOrders = (status, special) => {\r\n        let tempWaitingOrders = [];\r\n        if (path === 'waiters' || path === 'kitchen') {\r\n            for (let i=0; i<tempTables.length; i++) {\r\n                tempWaitingOrders.push(tempTables[i].orders.filter((order) => order.status === status));\r\n            }\r\n        } else if (path.includes('order_')) {\r\n            const normalOrders = tempTables[clickedTable].orders.filter((order) => order.status === status && (order.comments.length === 0));\r\n            const customOrders = tempTables[clickedTable].orders.filter((order)=> order.status === status && order.comments.length > 0);\r\n            if (special) {\r\n                tempWaitingOrders.push(customOrders);\r\n            } else {\r\n                tempWaitingOrders.push(normalOrders);\r\n            }\r\n        }\r\n\r\n        const waitingOrders = tempWaitingOrders.flat(1);\r\n\r\n        waitingOrders.sort((a,b)=>a.time.getTime() - b.time.getTime());\r\n\r\n        let ordersDetailsArray = [];\r\n        for (let i=0; i<waitingOrders.length; i++) {\r\n            ordersDetailsArray.push([waitingOrders[i].name, waitingOrders[i].table, waitingOrders[i].time.getTime(), waitingOrders[i].status, waitingOrders[i].comments, waitingOrders[i].price]);\r\n        }\r\n        return ordersDetailsArray;\r\n    };\r\n\r\n    const enumerateOrders = (relevantOrders) => {\r\n        let orderNamesArr = [];\r\n        for (let i=0; i<relevantOrders.length; i++) {\r\n            orderNamesArr.push(relevantOrders[i][0]);\r\n        }\r\n\r\n        let count = {};\r\n        orderNamesArr.forEach((i) => {\r\n            count[i] = (count[i] || 0) + 1;\r\n        });\r\n        let arrCount = Object.entries(count);\r\n        arrCount.sort();\r\n        return arrCount;\r\n    };\r\n\r\n    const onSetDone = ({time, table, status}) => {\r\n        const updateTempTables = [...tempTables];\r\n        const indexOfSelectedOrder = updateTempTables[table].orders.findIndex((order) => order.time.getTime() === time);\r\n        if (status === 'waiting') {\r\n            updateTempTables[table].orders[indexOfSelectedOrder].status = 'prepared';\r\n        } else {\r\n            updateTempTables[table].orders[indexOfSelectedOrder].status = 'delivered';\r\n            const ordersDelivered = updateTempTables[table].orders.filter((order) => order.status === 'delivered');\r\n            if (ordersDelivered.length === updateTempTables[table].orders.filter((order)=> order.status !== 'returned').length) {\r\n                updateTempTables[table].tableActive = 'eating';\r\n            }\r\n        }\r\n        setTempTables(updateTempTables);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navigation tempTables={tempTables} openNav={openNav} setOpenNav={setOpenNav} setNavActive={setNavActive} navActive={navActive} resetWhenChangingPath={resetWhenChangingPath} setPath={setPath} />\r\n            {path === 'tables' ?\r\n                <Tables clickedTable={clickedTable} setClickedTable={setClickedTable} clickCount={clickCount} setClickCount={setClickCount} setTempTables={setTempTables} tempTables={tempTables} path={path} setPath={setPath}/>\r\n                : path.includes(`order_`) ?\r\n                    <Orders setPath={setPath} clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} clickMenuItem={clickMenuItem} setClickMenuItem={setClickMenuItem} clickedOnDelivered={clickedOnDelivered} setClickedOnDelivered={setClickedOnDelivered} tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} enumerateOrders={enumerateOrders} getRelevantOrders={getRelevantOrders} categoryActive={categoryActive} setCategoryActive={setCategoryActive} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} menuSearch={menuSearch} setMenuSearch={setMenuSearch} logTables={logTables} setLogTables={setLogTables} tempTables={tempTables} clickedTable={clickedTable} setTempTables={setTempTables}/> : path.includes('customize') ?\r\n                        <CustomizeMenu setClickMenuItem={setClickMenuItem} clickMenuItem={clickMenuItem} tempMenu={tempMenu} setTempMenu={setTempMenu} path={path} setSelectedCategory={setSelectedCategory} selectedCategory={selectedCategory} menuSearch={menuSearch} clickedTable={clickedTable} tempTables={tempTables} setMenuSearch={setMenuSearch} categoryActive={categoryActive} setCategoryActive={setCategoryActive} setTempTables={setTempTables} addNewItemtoMenu={addNewItemtoMenu} setAddNewItemtoMenu={setAddNewItemtoMenu} menuInput={menuInput} setMenuInput={setMenuInput} /> : path === 'Statistics' ?\r\n                        <Statistics clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders} logTables={logTables}/> : path === 'kitchen' ?\r\n                        <KitchenStuff clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders}/> :\r\n                        <Waiters clickSpecialItem={clickSpecialItem} setClickSpecialItem={setClickSpecialItem} onSetDone={onSetDone} getRelevantOrders={getRelevantOrders}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}